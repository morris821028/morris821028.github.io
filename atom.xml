<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Morris&#39; Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://morris821028.github.io/"/>
  <updated>2021-12-26T07:26:08.595Z</updated>
  <id>http://morris821028.github.io/</id>
  
  <author>
    <name>Shiang-Yun Yang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《批改娘串起得那段經歷·伍》</title>
    <link href="http://morris821028.github.io/2021/12/26/diary-20211226-encrypt/"/>
    <id>http://morris821028.github.io/2021/12/26/diary-20211226-encrypt/</id>
    <published>2021-12-26T07:28:28.000Z</published>
    <updated>2021-12-26T07:26:08.595Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="01e236f38228cfbcca87ee741a9b01c9566463d2973e31a788f85f54d9267858">921dba8309d8a1e0e274dcd1d8d70b4463a0bfd7da1631f0a3c37f2243b7851400c2a2c81fd2570ddacbb14a9df4cc2d0eed941d8af85630b92e239bf1dd796a46ad0c20b486d2144d11a15714e6aedb1a07af332feec538cbcb3044ea447c0a5abae20a30fd90cf063e6c1f32902a67c89d22830337e9dea618f1060c9dda1f9332223f5ffb449f2bb91b1a93f5b44058288752a7d09f35ab9e49a472a60090fdc0dcae1ca7f0c0f9cfd9fe75b6b4a2be85bb7efe7b91eb166a12083b4c33d1bff24ebe368da8551844992d22a4bee3a27ce04b9ba9c3b153fdb4ea7f09cc60</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">請輸入您的 ptt 使用者 ID</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      您必須輸入密碼，才能查閱此文章
    
    </summary>
    
      <category term="手札日記" scheme="http://morris821028.github.io/categories/%E6%89%8B%E6%9C%AD%E6%97%A5%E8%A8%98/"/>
    
    
  </entry>
  
  <entry>
    <title>《批改娘串起得那段經歷·肆》</title>
    <link href="http://morris821028.github.io/2021/11/21/diary-20211121-encrypt/"/>
    <id>http://morris821028.github.io/2021/11/21/diary-20211121-encrypt/</id>
    <published>2021-11-21T07:28:28.000Z</published>
    <updated>2021-11-21T04:15:23.580Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="bb45ede3f7006516004e257458ee46f2870fd5e9ac5224120f35af2d8fd26c40"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">請輸入您的 ptt 使用者 ID</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      您必須輸入密碼，才能查閱此文章
    
    </summary>
    
      <category term="手札日記" scheme="http://morris821028.github.io/categories/%E6%89%8B%E6%9C%AD%E6%97%A5%E8%A8%98/"/>
    
    
  </entry>
  
  <entry>
    <title>《批改娘串起得那段經歷·參》</title>
    <link href="http://morris821028.github.io/2021/11/12/diary-20211112-encrypt/"/>
    <id>http://morris821028.github.io/2021/11/12/diary-20211112-encrypt/</id>
    <published>2021-11-12T07:28:28.000Z</published>
    <updated>2021-11-13T01:36:32.660Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="de1d04335c16583176e99c16eed06ae5767b673d167e71a7d9810134bca0ed3b">921dba8309d8a1e0e274dcd1d8d70b4422829381c831791183675fe87ab6c2e2601d0d6332cad500aad8403cd90b6c68ea3997ac5b6daf85967870273e787ea305f14ab43869ed4c631599563dded3ccc28f643873290c1090040364137e15e152c5b343882cc3abfb1847a9ebc94b1cb2abfd160fbf622748f186b4252a9c74a4ca9bc65088cc41756ef240905eefbef054fb754615259bf26229132e923d06d03e3459c804f6e88188049ca5889b162633906a1be55eaddd8071a86b86ebdd68288339f689f0093917dd1bdd0d1cc3818c69b6264b9ee6d9186dfafd0279d9656efbd92722d91622a907b23fd2a5c5847c18ff1190ceceacac6538dc1436f422ed94b066c93d9f43423935d0c1a7dbccb4619f8b4cb59545aa24234c1f1634ecb704c633787bbafb32ba8b7e1a51ae3ffb3309618b466ab342ae1e520a59afda287ff7a481ade258a7c501c74dd51ec183aab9d834344e3bd16f40dc90a8b1caa4164995cf2600bf7681e4835c4983c661c0dddb28efdd559397a1a67c7c89f38bc3f4f9aeb7043347494d178e50d76cd3536e0f858bb7f3303447e3d828605dbdb01580953b5b40cd6f81fbc9d3fc373581dd6e6885bf1fbd899a0100efe2383443b4e6f158cc5facb0b03ff443727c2b941cd5e5c0cbd30095a3c9e4a634fccbb0b0217462fcaa149a8bac75da31fec2530585cf640f161a0147f4a527b0577e421f42ad206a3ffb2f5e0f3cb0d14061b3a1542fe3f874a6c07fe597370ebf9312b5f9216243fb6ec72a53347afb9a826358e53e1cc0c94bd1bb9e33fcb71629b116c2e75cdfc8891219a52d35e8bd97effc1e1a048caf3ea220f9095b123a3a417e38d1d7725788a2f70999e6ec19c5b8cfd2c6318043261c2f929090c4cd2a7f2cba876e376c85a7ce664dccdcbcc13b7c439c3403eeadb09c7a6a2b032a3ab32db8b98ae37c5142690b0ec666471315c6c7a208d679d14c02a13a11db661707870bfff8acca69926543c214cd4573532bd1e97e2b7574985e31754d623c3ac8a135424e364b8de0e74c6ac0029aad596832fbc22b84b32caf436f3277366994efb58232711c2829cc905c4182377a3e0ae6cf193ef94020564cee5c5f6aec9ea2c463af96d5e42e8463100b2c19fbd5cd464f6bdc3180da206e017036942c85d449eb8f2c88b82c9e286141f293c2d6064c2418aeee2a276c45b8ee776abb6d723e4d9341dc3f41a65c19dc8965d747695f82f82c3e19d3a259c8602e379622a74bd5853f89b91f2303cb6ea390fd134ef98c307416171960f24506c080071f7fbe46be0330e868c7c5f8041c9dd7657b7799a84a155e257ebfc70d4262e1d93bafe39bc4efecfc982719a4143e54edf18989599f2c8bea5da1d9d1e8aa4f1b3006c51a845143d61416f2504db27f849882548c3127a59e67f2b47caed31c3d7088163cf9821d581d58a3b9793ab64be265a0f79a2ca0e20a63dacc5b39c83b3700eb07803784341b0438cfef933c2c37a774fa1e210d471d56efd6f2ab3c6832965b16760e48d40bb9912820da635c6e8b5313c3d28986d42943ee4074e3148cd19df56ea3914b25f5f1fd32ccaba82c0bdf0535eafec87e83df572f368fb06ea1cebe83cc26ebac924d35073914a1479b4f6cac9baa19f860daf6c40d475b7b99e7b91b4e443a02c64a977e2ccdad35d888a1f29e23b6d67fd8daa5805eb6caec011fa5e0345bf56f03b1c84899cb3ecc76c5c84f6fae23599ec0d2c25d0932856c754fc168f1bb810e2c263edb632de5942cf88646beaf8b8a25a14ff45b57bf21dcfd267a2716789f44b4b4bbb6e9de760a7043509558caa1e045bd46637aa0c9ee5214ca176169062f4e9d922d611b5cd840a92dac40bd67527e05fd1cb1849ba848c0d709e57ac9407cb33b8b68906964ad621d020163719c1651fe86395d4cd97597e78d14612be333a67fefa9a9e8f005f281391cfca0fc5eade7860ea45cc04dc22f712a74b4904b817c37664893e19d5ef6081a31702dd0558452a242f5cca830c95e9269c19ee41db285e5c95998f08a4e92f6bc6116c39ce24ce1a7cd8bc72c8ec6ad5db7af0926dfcca63b870c2f6fe1b7a26af955eccb0392f9b9e3df7a2d6e9e55d2b585ec15404c7020511ffbfd35acdcc0c02c5d056bf7a2244982647fa8523765f85e8f4bc0b99cc34cbf10bcc381783e3ce6eb2c92ebf67d8be62f8f042ecb048d20470ceceda9fef21275aa0b8e6ea4f1f282ccd32504994a6819d96ece7632fb89a6979d54b86a11b6d3a60b8a5d611e143d1f1b23b21ce5848e44f369f15f31731a0d4ba04798678003a6f3fd60ab5708cd6a2d1a620c2c735fef89e119be5ed805233dc7572acd130274d60db9bfebae0ef07708f8ed8bf0b64e03c9bcd367459dea25bc83fad800f92970ee6ecc472f4c0b0996e5c113f441596dee468e4b0c58b63a88480ee96aab2bbd6e25e2258260d780807b227fc272abe53d7771d9845512e53f169bf9a591f34723fbf2d79370598e6b900c470a8ab6c15b07e212953958aa63711b05737a05b8e8931ac98a3dcd792f449dc27a0e7e629512d73348a960646b52b7731f19304f3e0414221301f8df0f89bb8984e6ec2987c1d161874517755b7d290a206f918db0d930a71526504f7ed78d7be8e6f5181a54258de9e77d065c5324c6f1c59f80bb4e81352817c47d0dc2a3a6b64f63397466744366e7f8e2f0e547038a1de25a1b17fcc1a4c863fb5b94a36738d097e5fe2b9674cc6d6fc05fd1cf84871e98f21a7323530d411e7bb41f886290ba37899a7f7ecfe2e470a0ffe73052afb3a59bb003e0f52e981585a8d7a2b2c6e25dbb3f457d6dea0d6ff695656d62c2a876dd1291a86727bef1bf55e902675603e680805b84d6d1cfb4a6e1f754c38b2c4dc62fe71bf17b0f25480c5367cb2173818745f084fd785cdd035fdfd7d55b1398470b8de85a5da07e215b06c8d05e3e932b16c2e229a9a6628f5de9df3c1d7a7acbb1be5cf8818789fa2daa5acb9fc803e34c3343e1f52cb36a0fbe062b6a1d4bf1430c4f8a58d42dce86e0c5773bdbf5d64d77113f238b5496f78d75288020a88c753ba4fee66c2f1d3c7958bee0ce48a3352784ad2b23ee201315253a95e84effeae985d1b8fd7d5cce2933e8c311642dae069245dedcb527c7a1974076515cd3a525277130b63d1ce6f7fd8422062b3633b24b94270d58697954b449cb800d856cf57d91b1984b0dc15d3620dea62c0e43fec8abdae9ddc28a6c299a9fdeccb1b7d757dcd4d49fcd78765b2c099418054934f055e373ef9f35677e58c1a1e84180f11ef97cac125a03ff0768de1847e6d76e20c7c2d329637c4a1a79f1f5c17b8f5f0bb1019ba6f34c7fd9bb73a88b32c96fc7bc8e370b061a81f5410ae74aa9d5ba9679ad161dd98328f0081893bebe9148409978e9d725f00c69fd18a0c3fa09e2adaac6ae5bf168579129c01765c83f8a9bc1e223f6549f743fc2b3f894bb48b5b303ffbfac9f6662869ebcfad4a6b7a18e0938f13ec37a48fae787ffb29b317a20ac3d064879df4eadc881afbbfb63fa3a4b3e1e460bdebeaf64fc2f49c1f28516a0394114aaa0bbfc18770000f106ce4702b3deae6cf9d66231e5d5d86c50aaa954aedb36b01ffca3cf14c1f6580b821d8d59599aec5f2e3f0059eb9336974e661d10b20ab0d86f10075f5067f931176035568fee96b0f9a14aa0ec5aa83b86b36872baceaf7d72ccc7aab3c6fe7d9ad10d53a8d0c20bd391f11b65ba41d30d7f6d5af56b9e25f97d3a4e27ff2a50836fe0599742e285b017daa63571cd0c6d149c3af6a854c615e86515c5ebbf4af2967ccc8900c402f663641f630bf648010b9ca9f13c84bd88c0b8d684df40c32604747da5c149b411facf928ff65614d529ae19561b7c8072bbce7df28c2031c1a202e5bf23b62e49c7c49738572431f6a9121fcfc4255be2dee3f17ab79c82c6f13efb82a4e7c92cb8ff85554f63e1d6b16c17b86d68f9d1280555676cf1493a3cd4818e82c2370089109d370575a2f42096fad118794fa64fbb5fe5e98e8068da85df3e95e435170fe70b02fb6decd268f1343efe3786e79f1f54adbd2ba4d01f92129886a2132634f938d69c86bd48565bb3b90777266a9b366019b3c052f6c86f92fdd38f3507332286c3cf7bc78c42cfc62e57ed0257c6add606620a986115d714707ffdae56510947a411793b6319020796302d69447058cfcec799da8a7c5086837225d92bec0a86a2f43ff4112222bbdfdf48fe9f5724c098c7fd1b0c151920cfcf3e3c25271b69333fe4019f35ec74e458708309a67644eab7a03f79bec12a9cdcda908b807a4c067d00e07e544f327cb2098cef48e803f382512e6c22c7d4ad31189516b833e9b25aefd45adcb65fb7c04f25c9f51ef112f7c745c2d1e25b28697ebe44490c29484776bed486206c8e720a563f61fafa62b3efdfcf31e1cb90ef16d59bc0c8456ef6ccdc985b5e0cacc352d7f97df4c73d897bb0a71af2002b77d448731892ef419f379268655433f388d2902d1c57c6fabde3d9bb911bb593f7a5d0ce32729c8114151537a97a37fb53cde4f6c6729789306bb2860b35164ab9112b03c4ea7dd22f5cad94cca46aabc47b4160290cadacdbbf0363946a632a4c1694699aeaa76be8e58c426d98cf94138b693490c9b4251c297dd68fac53672bdfdfb074a26fc92e7dc1e73ee9040404def0d333820c75716b1c37112c2ff39a52f0c93e547c901dab3d3101c48bb91c9491a787e9c5f174bd53d856f9b985ee966bf5f96f532c109e653d6ea748477753900d5f716572c025c7b374ed4b23c851bd988e87f3c47aba092baf965d555abe5b15300e1a173ef647c152145c61593509dec3b81f43cb7ecd4c216a924b4f354949ba44d54355389ff4002db300bd2d7e8c7a2c0dc4afb0dd396d4b8000793806e2b8c2bd091c928e566a393a7628bb61954753c1da36b9ed4197854a6144ee4a84d9624cd7d24d01c8fd5d1b696fdd29073b8e121b3e8f146d14ec252dde5d68a76fd63a1cf5694b83e06b695ce7a78327ceeec45536c8f60dca856504eaf6bee42a2831bad0cd67bd4b4cc53b2351ccc25ab66407cbd5fbff18ff26eb2b52cc629bee33b000aa5b5dddf8e2a2ebd9f13cc85320b58082589c94e8ac16c6dbe0c6e304bfc9eb37f83e982f34ed091f6cf9bfbf062fd4d3045a5a1b32afc6688d95b21939f4fb3e92f8c5ba1396b49147c80c7ada6419eeae218eb5e34b0e93eb0bfa8115240737bdbf2f08ae0c76136a7607cf30e9f2b50d2bd1cea4b05c0e48968714235d091e09337feb5190c94010b5f57399eeaf85be7b767a68e27201f3666dc972f638f459bf03f73f5419622c620a13a1f9ffac5c96e63120798a58a9559a11b96aef31db048ea536b085db73df963eef693df51ddba1c1db8f32a78ad5bed788d7367e7c712c97724b19f3f73a184631339cb0da75866798ff</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">請輸入您的 ptt 使用者 ID</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      您必須輸入密碼，才能查閱此文章
    
    </summary>
    
      <category term="手札日記" scheme="http://morris821028.github.io/categories/%E6%89%8B%E6%9C%AD%E6%97%A5%E8%A8%98/"/>
    
    
  </entry>
  
  <entry>
    <title>《批改娘串起得那段經歷·貳》</title>
    <link href="http://morris821028.github.io/2021/10/31/diary-20211031-encrypt/"/>
    <id>http://morris821028.github.io/2021/10/31/diary-20211031-encrypt/</id>
    <published>2021-10-31T07:28:28.000Z</published>
    <updated>2021-10-31T09:57:15.841Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="a00d263ecac3378e0989e43097e69643045f1658362e98ab9c1971dabdb25f2c">921dba8309d8a1e0e274dcd1d8d70b4422829381c831791183675fe87ab6c2e26b56f59544f2755bf002df0aa9918163f56b34a124c7b2f016959173ad5ef6f4f89ca55eccf07d40583bb281fa2a2130f81917d58a5cb3a3601fa752b1d6f69530b168ca34a7ef3a8bb5185dc2b41a5709894ec507d148f8558e6a8f821fa764a5d29eb80b2c6d0e569a0b1fc86789fc24c04e008ba87f71a63248231c51a16a8e6631d7170a3527dea538f7f4ad1eca956db2d91d7bb86e3dad122d6d74f9f7167044fecf7afd6faec1da9def6301420e60fb79a7e600b50246de7eeb8fd6994f524641d2f1a33c65afe582444bc51695854940625b324720f431fc7eee2a8c920247852c0f7340f2fb4c361e6c4adbd92f051ceddacfa9f25610fb23aa471e120038c6b444132f9a3d5b2f61e6bc64387883e60588cbe560d41e974eab5962e54a83413b21c974558db4c91b763af00226bd6205b4942fb50079ec1d6726e23a8832bf9eee01a28be54c4e1b1eaa436450c6f838b6fe591369983a645c48a0aca4d550b57751a9626419c3fac2c0b367f53750ed85125aaabfb0f8f9a42ab17ec7699f08b2a4239295f527ada8c0af1e69f806c27be2d498549dc8f525c35fd305df77835122649b8d7c6c3704bc3282dfd8c61acd58a06e53bb9593ac075f7fbbfa1cfc46c425ffa8b3b03dad0347db23fba000bb901db5e75b5243b1b88f3ecca54cf6d5dd2638406c3ffabac70351834c6d8af5bd794d7c613ac5e4ba65e9149fffe608dab8033cd81f1df4c6d5ed2868b0df75a8bd2ed28b18a239a8f4c08b83128af33ba904689fe4b6b5e5bb63eccbe996748291f28bf8c99cf02c02c605dd9d005f7436dcc33ecfa5ca23e0c472293734d52b70f4171ba8e3bde1d13beab5612e9440fb5a099b1bfcf2ebd411932edb41fa2879b178550171e41ef6bff3ddc2e7d7a2b41bca3bc9bb5404ee4f47376bfc038aaef47babd73bcf3e8cbccd618a21b93da94a8d0d8a8226e91bfc34b71883eac367efccbdd316ad061ea8668c9c68c0674d64c95dcc8ac60d69170a0549b5133a2f57d95ed89f0d88a011a61960d1d6f70eccd50a1dc208978d3b6dfde466be3664c0167a2c07103abce155141a033140f2ff3f0c2c8826642a1605eaf8c9e8a1b1b72293f611595e36a19284e36cda218a343ade1582319fc9fff9f3b7f61c74e0200955ffa243a7d0bddc75c394b8a7b7ab2ffa815b518463f5b3077053fb449fda06dc9533b7e18f229d1b0707d5981ae2c3d4ea8d55e763698b0aae406ede053f837f987678a11470e2a58a494b346c7ba7d8a215d52b75e2cb50b4db2fda53727f3362911697e0a81ddba39e83e963fd88e2a3417885be4938c00ff5a963ffaf9770a30e2b45658cfa328f5f8b52dd8e2570dcf2e9ed9c8f13676307c2f6eec39163151c2c4caa4c6fd7598049efa66f55d415f11405afb099e2c2f41207db2fcd1ca32ad39787178aab9b94d4ca6c20cb3477d560ec1863a370ddc4cdac18d4e56764f9aaa539d8797eace8554205467037e13710351b0cd2755e615b6891a091264e7372ec9d482bffcebf12bfe43ea441bc048fe4e32fa1774ab0934852de47aa4ce58f4e56753963dbb1cc193532e9e6b7e38d0cfd477469228f14237322c1be9e63e8ae1333926c71ad6e21fd5b1c8c29a169cb55863385e4a03fd7db45bc603633d5ac08b618583722356e3d230d488164eee1a4a6f57eba002d22135adf446e9c19abcf36338b17a0d8af5decd45949b612730bbd7c62b416d94be237dfe1232504740b3fc7b6a09666a985ecf72b399e233bcae0f88820cf883770cebf095530312cfdc527cc25cbe37d53e13b7baec5a89bfa8a9f9c58ff35ead62f57dce9bbb82282f639a387c7ae5d058766736f711e17fc5f7883728f87650a17fb474a3866686e9235cc8ff1a4b62891dc3264e3b4703deff476e55136cf63d743b4f10181b341f58f1dd7a3c9088efe4e2bb83e41bb502e48ea3655e28750dba70b57aa5bb2c9bb494a1416b5706a61500bf78e09274641830fa4f8d7b4a3d21c66180d21c6a9052fea168a4e99eba511c6f758efe5d7890c4f91f6713340e4f2aaf0254416859233a7b9cf3b10e82ddefa7439f3af90b98e867d593ec4b4be724f8f3b751126b1f4e883c42013df99aeed9deb83da207b3c6de17dc78680434ba2a6fb0ee8b357827a1e97b67431762af2bc09caaef9eee34840d7864fd013d1a009b35f0292d6d7bbb54306501956bfe9a20fd35b33bf63c778e3cacf2387add287d290ceaf6d5b0307ad1c75aeb5901b4df5ac9e86bbaaeba168ef705581c3e2db782ef48685a551788990ba2835858458f3941ece3f0d085383bbc07165ff9a06fec3d83a7be468dd8d2611a3359cf70dd35a0550651342d9cc2d6b546242c20029cfa3425cbfe6bf84ba21f1cf1661625098a05f1bcc1958c5e4acf58e8b914089b04dac764671e1580b608569352b0dfecbf199a8209dc4c0324f27136d5a523de2c9e32135ab2ada00437cd89c7ca56a309893f803db28ae5d46ffe3472c2d6cc81aa16068795540e377e1acb5f11d51f1a0042e5a2c98e2cb3f72fb9c208c1c31e93767449c3a49f976593cfa471d5b5a0b04c34d2308a51ca9a0f999cb427485ed69a1da830b56b73b8ee8f8fb61fc3b5693935e3670b5b3f829419d5ab2641adfce34e05f12672d6c1c520109e6512db4aeb94f4d001b9d1d76faba36e53cd71285fb8d6855c118bdb385b8813c282f848948ee8bd8c95761c746a8f36fca0ad1debb32e2cdf69b92d67c8423fa02a2193c2b9c0aa41fae5524011a614ee4eb3dcadd49958a396b25f4801b7fba5416d75ed60a30ecb2c64e499b7f0f9b00674f174542b31db4da4f2f0432d684ddb09cd049758e205d48240524fbecf462052a06abed8c4c0b440141bb34aeec200fc4cac95e6bc9f2a7ebb5e40658da85c7427fed069e9dd538eac01f44e181616fb58ff648788d4152582cb88b18aa0442d7f7367ccda55cfcaa5a0a604384f1f176cd78fa6d7a52f16938b5e7078ae40dcea1ed89a4bbbb4a73aa872c00d909bf0da4ceeb14ad76c9f18bff1a4aa141424d6151cc1a48cbc288efdd560d5bef34206ea7af3743c8b0304254e00cc108577660ea6f16b669a258277369e3750116738a2e4e3b7ccec47ccc4eacc4f0846c63555e96673729761a4ed2dd4b66eadbc0d198d26b230937c2990536f8837303f5c296ddabb416f1bea4672c15f1854862e637d2aec78f7eed38c6ee5e6afe51165407a411d916de8dbbcef55434cfc0e84cbfd9591ab6f22ba4f07d4bd51fe3d3d8653294dc0c852b8f539b2ecdee54a8a673d814ce990bc30a535d2b5e0f7c3bca0d457b202407d4ac83ab999da3e4d29aef69d36d0162cc453980345e3517e517b812764fb0589be52ae6f7fff49349fb6d78bd2fc548cc9077a03ec55639d069f77901ad25088346f41316eeaa227d4c25257e3501e7e56c704d7a1622a498793481a59c582d88fdf4e48bbcabdd8e739926a594554c759faa3386c9f74b52b4c5075d83467300434a5cad05509aa1df314938e0fb70fc5b7a28b1ae2ea780170a0c4404bdb2dfa295d3071fba0a8a6c6789af918d20b62a9cd1d964a47a60349cb3832ef0136e31b0d461109b35429d69d97ad48dbf7b2ad4fbb97dd570d0bf446cb998258dde2d2232228679f621642275320fae47294d25ebf4037729413c75f4b3367e2f4cd1df0044276626b7372ee529b96b3fd8a10be6eb95e66dcea0e066e6ed1c14f77d9e4d860532dd02794ac1bcdc0b8e060a0ec70fe86bfaea0d95adce43d9d1ac2f7ad5d4813e8a97bec64d041065433be1f85eaf878933c98b94ec23851cd2a3ec2828dac233ace7e0b4a78c1b226ad42d6493c85496a7a535ba47dc6a35dfa558bdf5313700aef2c0f66c5c8b298f5f485f236fac1c7dac33f016814d86018a88c450341c9dab109f37fdaccf8b713ee8a7c23312a0da4b34a9824320eac4bbd16a68ef94de21e7916b1a5527d3246961705a15af2093293a5a275e1b7990ae4c92f05ec90f63d77b1078e282b3b045bc27fdf609c201c8510673fee79dd3aa3b45766e81809b496b54ebdbcdd69ad99f56ff1de17a051e348fd20922097fcc6515d6c2b73230dbbbf53d5f51982f316830b8a9f4500c39d4ec53ff16a0c4afd74be640689af8f5643de23ce2f9fb9ea8d4b7401e59a8f0ad53002d9151308cf1441690d4e4e46c5db66baa303786be325f874887d30a0132cb31028b264f8d8c0e3200fd8a13eca1743acf442b248f50ca1e5432c33be52a16e6d185cf242b667d4856b15d46864342a92b14be37aae54e344f50f28f76be6c63575d3d2219af72c27491864c10df1d2b0454cadfc4b501d92518f75f3c6e66eb868c6e6cdce47e2d979c6763b76b1339c6bef99f92b462e525b0ff0f984ef6a13b47dbd6fd2b612473c9d05ec27bce8db09d322ca94ce83a641cbd42b1cb4ab37d7d1dfe8593d5cc4c4bc1055a813ee7071464cc19f0b35ceabeec10f408af60d7a64adc1acc7101ad3dd6313ae063a271565f00656705040cebcb460ffe037b734b496bef9c9105f453e3c9ede8eff8dd6c16ffb648646b88ab193949aadcaa9608f0a2ba9525fe0db59d37aefb24d692d92bcf8b37befb29a978062b865958fbe7bb7a2921ac65112e0ef6ae376f5c0f3637bd6e467054bfa92cee45bc0be54481d047e289777d0b0d75fb8057f21209f30385150761c6da06a3749ada4f933ddcd8fac0a44ec8b97700bb304a6a52aa28bddf1eaa8ec00aee9c0ba93534aa63736e12b6b1156e148573be9125e7db219be7dce9091fb054fe6105ef13ce9d75bbfa32a1b92c91d4f9bcfa608bd2d6920d2803c2e2c79da96214502c520523738e57612ae99f75055787efb6477935e06a653cc2264cb2668a880719064e15f89a4de3a11f74271c34b715e554b340f6c95d36d12c42d302bda826eee1f993792116dc061f5b93a9a799ed755c6851e7d2ddbc37171a24b6111664c66963c98f2ea422995af8e1c176f492b1cc8cac7b1b3ad102ddfe0afd56812fd286f3e91549dea8a3d7ccd214eca85a6be1b0b564d7081549ab757161dd5df13c5314cce976c89ec84d6908a3bd1d54d421a19306cc335b334b43d78d07a0d403d59d03f48a3b8ae85a4945bc294a883b95b8a5f07ece6eb6d423f0bb87e4a15a2c9146e44c70fcb8c57584eb86479e3fd45c095861af00dd1e0d50ab89e8d246c6dd3e0a301f59fbf8d52a339b0e2414125abd40784e8057cd1d83668efd1ec8185aa23a6492330cab366ba4020edc5c816188909b9cab8a1769ef4fa714e8563bc8035e8c84f0ccbac7dcacd65e97b5920fb14d62b5069abe29441b572ded234862b8a6f3d9522fdcf54cfbaf0f8719c1f1b3189df5fa870ec964ed2b88ed33c948fe0adc8a4eb3320bd12bd8c7dead4b</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">請輸入您的 ptt 使用者 ID</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      您必須輸入密碼，才能查閱此文章
    
    </summary>
    
      <category term="手札日記" scheme="http://morris821028.github.io/categories/%E6%89%8B%E6%9C%AD%E6%97%A5%E8%A8%98/"/>
    
    
  </entry>
  
  <entry>
    <title>《批改娘串起得那段經歷·序》</title>
    <link href="http://morris821028.github.io/2021/10/28/diary-202110-encrypt/"/>
    <id>http://morris821028.github.io/2021/10/28/diary-202110-encrypt/</id>
    <published>2021-10-28T14:28:28.000Z</published>
    <updated>2021-10-30T03:36:50.249Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="3af0d301737d557b33960f95bbd4f8a44f10ce310a13710ea87f747617469be3"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">請輸入您的 ptt 使用者 ID</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      您必須輸入密碼，才能查閱此文章
    
    </summary>
    
      <category term="手札日記" scheme="http://morris821028.github.io/categories/%E6%89%8B%E6%9C%AD%E6%97%A5%E8%A8%98/"/>
    
    
  </entry>
  
  <entry>
    <title>好多個 28 在這個時刻</title>
    <link href="http://morris821028.github.io/2021/10/28/diary-202110/"/>
    <id>http://morris821028.github.io/2021/10/28/diary-202110/</id>
    <published>2021-10-28T14:28:00.000Z</published>
    <updated>2021-10-30T04:27:58.575Z</updated>
    
    <content type="html"><![CDATA[<h2 id="工作近況"><a href="#工作近況" class="headerlink" title="工作近況"></a>工作近況</h2><h3 id="整合"><a href="#整合" class="headerlink" title="整合"></a>整合</h3><p>整合產品就麻煩的環境問題，尤其是大型程式開發，現在又同時有併發、平行等需求，其他產品的優化方式非常特別，各自測試都沒有問題，一整合就出事，接著就是一陣暴打如發生以下幾種狀況，不外乎就是連繫到我身上。</p><ol><li>噴了一排錯誤，但第一個警告訊息來自你負責的功能</li><li>許多執行緒的 stackstrace 錯誤，列表第一個的你負責</li><li>負責整體監控系統，註冊了所有錯誤訊號處理，你回報了錯誤</li><li>噴了一個錯誤，stackstrace 貫穿了好幾個函數，而你是最後一個</li></ol><p>滿滿地無奈，在這如此大型的程式開發下，沒有多少人能釐清問題所在。分工之細，只能四處找人通靈。</p><p>十月過後，工作就滿四年。在這四年間，代碼的提交次數也逼近七千次，登上了第一位。一部分的原因也在於修改的技術面比較通用，只要出現一則鬼故事，就得去調整整體的使用方法，再透過正規表達式去修正所有關聯代碼。但不是那一種單檔修改就一個 commit，數量之多會拖累前測的工作量，再來是 revert 操作可能過於複雜。的確看起來很不軟體工程，無疑是有點特殊狀況。個人佔有如此大的修改比例，很容易引火自焚，瑣碎的小錯誤都只能交付到自己。在緊急狀況下，與其用講的交代下去，不如一肩扛起，工作量便越來越不樂觀。</p><h3 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h3><p>拖了一年的規劃，總算把 JDI (Java Debug Interface) 掛上了覆蓋率測試，不同於單元測試的覆蓋率。原先的單機框架中，動態分散測試點到不同的 JVM 平行測試，盡可能地達到負載平衡，因此就不知道怎麼搭覆蓋率的套件，最後不得不讚嘆原生的 java agent 和 reflection 機制，偷偷用了一些黑技術才完成。覆蓋率終於由 16% 提升至 36%，以後就更方便知道哪些檔案有測試。</p><h3 id="待續"><a href="#待續" class="headerlink" title="待續"></a>待續</h3><p>忙了好一陣子的 tcl interface，上層下指令要有些做好 3D Viewer，兩年前規劃的 3D Viewer 恰好派上用場給個交代，那時嘗試做了一個小原型，也未能滿足所有需求。實際做起來問題之多，就像玩了十年的《楓之谷 Maplestory》，突然要求做個 3D 版本一樣，如何操控角色、過場動畫、使用模型、載入模組等問題逐漸浮出，一個人恐怕做不好。跨平台環境的戰爭，肯定在等著我。</p><h2 id="生活雜事"><a href="#生活雜事" class="headerlink" title="生活雜事"></a>生活雜事</h2><h3 id="Serendipity"><a href="#Serendipity" class="headerlink" title="Serendipity"></a>Serendipity</h3><p>交友方式千奇百種，曾經讓朋友在我忙著 coding/論文的時候替我回覆訊息，結果幾年後湊了一對基友。9/15 那日，ptt 上收到來自一個多月前的文章回信，自述「受朋友委託，幫忙在 github 看我曾寫的 source code，感興趣便跑去看部落格文章，追了幾篇文章，其中提到 ptt 文章 … 然後就送信了。」那時我心想是哪一個 source code？卻看到「批改娘」，第一個反應是「學弟是不是用美人計想騙我回實驗室」。</p><p><img src="https://i.imgur.com/TJjX7YL.jpg" alt="「他們是打算讓我們工作到死啊」《異世界迷宮黑心企業》"></p><h3 id="某日夜晚"><a href="#某日夜晚" class="headerlink" title="某日夜晚"></a>某日夜晚</h3><p>一般來說，在路邊看到漂亮小姊姊能閃則閃，因為十之八九都是推銷，一旦下起雨來，也只能硬著頭皮上了。果真還是被纏上了，甚至跟著撐傘走一大段路</p><p>「你們哪間公司的？」正想著甩掉<br>『O O O O』<br>「這個我知道，之前有告過你們公司耶」<br>『那沒事了，謝謝』<br>朋友普遍表示：「都沒被搭話過，我看起來又窮又宅 … 我不在她的考慮範圍內 …」</p><p><img src="https://i.imgur.com/9xItDlJ.jpg" alt="「我不在他的考慮範圍內嗎？」《加油吧同期酱 》"></p><h3 id="某日清晨"><a href="#某日清晨" class="headerlink" title="某日清晨"></a>某日清晨</h3><p><img src="https://i.imgur.com/VZjuw6v.jpg" alt=""></p><p>朋友普遍可以做到「還沒睡著，天就亮了」、異常的我則是「醒來，天還沒亮」，深刻體會到自己老了。從小就被訓練得很早睡，隨太陽而起。嘗試的那幾次熬夜，隔天都不太像自己。而飛往美國出差的那幾次，調時差的自己就像廢人。</p><h3 id="某日正午"><a href="#某日正午" class="headerlink" title="某日正午"></a>某日正午</h3><p>高中資訊老師打了通電話聯繫我，這不是第一次，仍然能讓老師們記得，備感榮幸。大學畢業前詢問我要不要回去當老師，那時的我正苦惱無法通過畢業門檻。現在被感覺好像步入正軌，實際上在職場上卻感到力有未逮。這一次，被交付指導小學弟一些程式問題，而那是曾經我出的題目，那時的技術力也不夠成熟，老是被說測試資料不夠好，被指出標準答案的一些漏洞，想起來就是滿滿的黑歷史。</p><p>老師隨口一句「現在在哪工作？ … 結婚了沒？」不經淚下，在公司合作的老同事，也聊著聊著問道「聽說升了主管，不錯哦。 … 這麼快就吃完飯，在家工作？有結婚？老婆了嗎？」已經回不去那個幼稚的我，也得開始面對人生課題。</p><h3 id="二十八"><a href="#二十八" class="headerlink" title="二十八"></a>二十八</h3><p>恭喜 morris821028 抵達了 28 歲，老是想小小地抱怨，要是 11 月生，整串就是可以迴文了。海外的小夥伴總是覺得 1982 年生的老傢伙，怎麼這麼活躍。</p><p><img src="https://i.imgur.com/xdIQuKt.jpg" width="40%" height="40%"></p><p>住址上滿滿的 28 號碼，近期稅單上也正好著 1028，繳費單上也也有不少的 28，就像著「巴德爾邁因霍夫現象 Baader Meinhof Phenomenon」 其中的證實性偏見，巧合般的重複，不斷地在意著。</p><p><img src="https://i.imgur.com/1DJ8bKG.jpg" width="40%" height="40%"></p><p>不同過往的日子，難得在生日那一日，走出房門，體驗著好多沒想過的事。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;工作近況&quot;&gt;&lt;a href=&quot;#工作近況&quot; class=&quot;headerlink&quot; title=&quot;工作近況&quot;&gt;&lt;/a&gt;工作近況&lt;/h2&gt;&lt;h3 id=&quot;整合&quot;&gt;&lt;a href=&quot;#整合&quot; class=&quot;headerlink&quot; title=&quot;整合&quot;&gt;&lt;/a&gt;整合&lt;/h
      
    
    </summary>
    
      <category term="手札日記" scheme="http://morris821028.github.io/categories/%E6%89%8B%E6%9C%AD%E6%97%A5%E8%A8%98/"/>
    
    
  </entry>
  
  <entry>
    <title>Company Ghost Story 公司鬼故事 14</title>
    <link href="http://morris821028.github.io/2021/10/28/work/company-ghost-story-14/"/>
    <id>http://morris821028.github.io/2021/10/28/work/company-ghost-story-14/</id>
    <published>2021-10-28T02:00:00.000Z</published>
    <updated>2021-10-30T02:44:28.624Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><h3 id="Format-vs-Concatenation"><a href="#Format-vs-Concatenation" class="headerlink" title="Format vs. Concatenation"></a>Format vs. Concatenation</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String.format(<span class="string">"format "</span> + a + <span class="string">"%s"</span>, b);</div></pre></td></tr></table></figure><p>大部分情況，很少去生成 format string，<br>混合使用很容易遇到表示錯誤，因為當 <code>a</code> 中出現 <code>%</code> 等特殊字元時，解析上會發生錯誤。最好是統一一種使用規則。</p><h3 id="Comparator-Signum"><a href="#Comparator-Signum" class="headerlink" title="Comparator Signum"></a>Comparator Signum</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">long</span> a = func(x);</div><div class="line"><span class="keyword">long</span> b = func(y);</div><div class="line"><span class="keyword">long</span> dir = mDir;</div><div class="line"><span class="keyword">return</span> (<span class="keyword">int</span>) a - (<span class="keyword">int</span>) b;   <span class="comment">// SHOULD Long.compare(a, b);</span></div><div class="line"><span class="keyword">return</span> (<span class="keyword">int</span>) (a - b) * dir; <span class="comment">// SHOULD Long.compare(a, b) * Long.signum(dir);</span></div></pre></td></tr></table></figure><p>隨意 casting 三不五時就會 arithmetic overflow 搞砸了排序。</p><h3 id="What’s-Not-Equal"><a href="#What’s-Not-Equal" class="headerlink" title="What’s Not-Equal"></a>What’s Not-Equal</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ((a == <span class="keyword">null</span> &amp;&amp; b != <span class="keyword">null</span>) || </div><div class="line">    (a != <span class="keyword">null</span> &amp;&amp; b == <span class="keyword">null</span>) || </div><div class="line">    !a.equals(b)) &#123;</div><div class="line">&#125;</div><div class="line"><span class="comment">// WAIT, if a == null and b == null ?</span></div><div class="line"><span class="comment">// SHOULD Objects.equals(a, b);</span></div></pre></td></tr></table></figure><p>有內建方便使用的函數，別再這樣寫了。</p><h3 id="Sync-Up"><a href="#Sync-Up" class="headerlink" title="Sync-Up"></a>Sync-Up</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Record</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">merge</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> a.setParent(b.getParent().copy());</div><div class="line">        <span class="comment">// refactor, a.setParent(b.getParent());</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Merger</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">(Record r)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            merge();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            <span class="comment">// nothing here</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>為什麼偷偷搞了一個 Exception 又不給 log message，一不小心就 refactor 到奇怪的東西，曾經把 <code>NullPointerException</code> 視為一個正常邏輯，修掉來自另一個 call path 的 NPE，卻又踩了另一塊的雷。</p><h3 id="Keyboard"><a href="#Keyboard" class="headerlink" title="Keyboard"></a>Keyboard</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">SHIFT + INSERT = CTRL + V</div><div class="line">CTRL + C</div><div class="line">CTRL + Z + ENTER</div><div class="line">HOME/END</div></pre></td></tr></table></figure><p>大家耳熟能詳的 CTRL C+V，都不知道 CTRL+INSERT/SHIFT+INSERT，而在 X Window System 上，選取時會自動複製，不用額外按下複製操作。</p><p>至於問 INSERT/DELETE/HOME/END 是什麼的小夥伴，還是好好看清楚鍵盤吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Java&quot;&gt;&lt;a href=&quot;#Java&quot; class=&quot;headerlink&quot; title=&quot;Java&quot;&gt;&lt;/a&gt;Java&lt;/h2&gt;&lt;h3 id=&quot;Format-vs-Concatenation&quot;&gt;&lt;a href=&quot;#Format-vs-Concatenatio
      
    
    </summary>
    
      <category term="工作應用" scheme="http://morris821028.github.io/categories/%E5%B7%A5%E4%BD%9C%E6%87%89%E7%94%A8/"/>
    
      <category term="鬼故事" scheme="http://morris821028.github.io/categories/%E5%B7%A5%E4%BD%9C%E6%87%89%E7%94%A8/%E9%AC%BC%E6%95%85%E4%BA%8B/"/>
    
    
      <category term="鬼故事" scheme="http://morris821028.github.io/tags/%E9%AC%BC%E6%95%85%E4%BA%8B/"/>
    
  </entry>
  
  <entry>
    <title>Shiny People 感謝</title>
    <link href="http://morris821028.github.io/2021/09/12/work/appreciation-letter/"/>
    <id>http://morris821028.github.io/2021/09/12/work/appreciation-letter/</id>
    <published>2021-09-12T10:00:00.000Z</published>
    <updated>2021-09-12T09:11:28.467Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景原因"><a href="#背景原因" class="headerlink" title="背景原因"></a>背景原因</h2><p>公司有一套 Shiny 機制，可以在特別日期或事件後，來表揚合作不錯的長官同事。有時候表揚可以帶鼓勵金的，當然這筆錢不會由您支付，而是由部門的某一個錢包裡出，理所當然得不可能存在同部門互相洗錢的行為，仍然遵循某一種流程。</p><p>詳細信件內容有點不同了，就當作有朝一日會在網路上搜尋到吧。</p><h2 id="任職周年慶祝"><a href="#任職周年慶祝" class="headerlink" title="任職周年慶祝"></a>任職周年慶祝</h2><h3 id="Software-Architect"><a href="#Software-Architect" class="headerlink" title="Software Architect"></a>Software Architect</h3><p>To Jeffrey Morehouse:</p><p>I really appreciate your great art, which facilitates high productivity compared to other products. In these years, give the opportunity to develop my improvement thought in core. During coding experiment, your resource and past experience help me a lots.  Although we’re working on different ways these years, I’m looking forward to having technical discussion with you one day.  Congratulate to Techholic!</p><p>感謝您轉交下來的偉大傑作，讓我們產品相較於其他產品<br>擁有非常高的生產力、極低的開發週期。同時在這幾年間，<br>給予我機會去實踐自己的想法。並在開發過程中，給不少<br>資源與過去經驗參考，這些都讓我學了很多。</p><p>雖然這幾年間沒有共事，期待未來可以分享這些技術細節。<br>為我們的技術狂熱慶祝！</p><h3 id="Manager"><a href="#Manager" class="headerlink" title="Manager"></a>Manager</h3><p>To Thunder Lay:</p><p>I’m glad to be the early employee in your part. The unfailingly patient leader is very important to me in first job. Even though we’re good at different profession, we learned from each other to complish great big tasks these years. That is very good experience, and rare in many kinds of job career.</p><p>很高興地成為早期的部門成員，對我第一份工作而言，<br>您的耐心指導成為很大的助力，雖擅長不同領域的專長，<br>在這幾年間，取長補短地完成了許多重大任務，這真的<br>是在其他職業生涯中可未必能見到的非常好的經驗。</p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>寫完英文，看著自己的譯文，赫然發現我的中文死去，找些朋友提前問個意見後，只得到了一致的答覆「看不懂」。在沒有前因後果，不具備相同處理的條件下，看起來可能是誰要離職了吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景原因&quot;&gt;&lt;a href=&quot;#背景原因&quot; class=&quot;headerlink&quot; title=&quot;背景原因&quot;&gt;&lt;/a&gt;背景原因&lt;/h2&gt;&lt;p&gt;公司有一套 Shiny 機制，可以在特別日期或事件後，來表揚合作不錯的長官同事。有時候表揚可以帶鼓勵金的，當然這筆錢不會由您
      
    
    </summary>
    
      <category term="工作應用" scheme="http://morris821028.github.io/categories/%E5%B7%A5%E4%BD%9C%E6%87%89%E7%94%A8/"/>
    
      <category term="其他" scheme="http://morris821028.github.io/categories/%E5%B7%A5%E4%BD%9C%E6%87%89%E7%94%A8/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>Company Ghost Story 公司鬼故事 13</title>
    <link href="http://morris821028.github.io/2021/09/12/work/company-ghost-story-13/"/>
    <id>http://morris821028.github.io/2021/09/12/work/company-ghost-story-13/</id>
    <published>2021-09-12T02:00:00.000Z</published>
    <updated>2021-09-12T03:29:27.583Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><h3 id="Default-Constructor-Trap"><a href="#Default-Constructor-Trap" class="headerlink" title="Default Constructor Trap"></a>Default Constructor Trap</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</div><div class="line">    Point() &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(); <span class="comment">// why?</span></div><div class="line">    &#125;</div><div class="line">    Point(<span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123;...&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>一開始不宣告就好了，當有自定義的建構子，預設建構子自然無法被使用，沒必要設一個陷阱讓別人踩。</p><h3 id="Feature-and-Backward-Compatibility"><a href="#Feature-and-Backward-Compatibility" class="headerlink" title="Feature and Backward Compatibility"></a>Feature and Backward Compatibility</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Engine</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String mFeature = <span class="string">""</span>; <span class="comment">// Why not null ?</span></div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DbObj</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String mFeature = <span class="string">""</span>; <span class="comment">// Why not null ?</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>空與空字串的意義不同，預設為空字串 (<code>&quot;&quot;</code>) 的狀況並不多見，為空 (<code>null</code>) 在序列化和反序列化時的差異就很大了。</p><h3 id="Fancy-Check-and-Cast"><a href="#Fancy-Check-and-Cast" class="headerlink" title="Fancy Check-and-Cast"></a>Fancy Check-and-Cast</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Shape shp;</div><div class="line"><span class="keyword">if</span> (shp.getUserName().equals(<span class="string">"circle"</span>)) <span class="comment">// wait, where is your `instanceof`</span></div><div class="line">    <span class="keyword">return</span> ((Circle) shp).getBound();</div></pre></td></tr></table></figure><h3 id="Call-By-Value"><a href="#Call-By-Value" class="headerlink" title="Call-By-Value"></a>Call-By-Value</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">readColRow</span><span class="params">(<span class="keyword">int</span> col, <span class="keyword">int</span> row)</span> </span>&#123;</div><div class="line">    Pair p = readPair();</div><div class="line">    col = p.first;</div><div class="line">    row = p.second;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Java 沒有 reference type 的這操作。</p><h3 id="Slow-Feature"><a href="#Slow-Feature" class="headerlink" title="Slow Feature"></a>Slow Feature</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">exec</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (;;) &#123;&#125; <span class="comment">// where is throw new UnsupportedOperationException();</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>我可不想跟客戶說「你再等等，這功能只是比較慢」的謊言。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Java&quot;&gt;&lt;a href=&quot;#Java&quot; class=&quot;headerlink&quot; title=&quot;Java&quot;&gt;&lt;/a&gt;Java&lt;/h2&gt;&lt;h3 id=&quot;Default-Constructor-Trap&quot;&gt;&lt;a href=&quot;#Default-Constructor-T
      
    
    </summary>
    
      <category term="工作應用" scheme="http://morris821028.github.io/categories/%E5%B7%A5%E4%BD%9C%E6%87%89%E7%94%A8/"/>
    
      <category term="鬼故事" scheme="http://morris821028.github.io/categories/%E5%B7%A5%E4%BD%9C%E6%87%89%E7%94%A8/%E9%AC%BC%E6%95%85%E4%BA%8B/"/>
    
    
      <category term="鬼故事" scheme="http://morris821028.github.io/tags/%E9%AC%BC%E6%95%85%E4%BA%8B/"/>
    
  </entry>
  
  <entry>
    <title>被預告要開始管人的我，今天開始學管理？</title>
    <link href="http://morris821028.github.io/2021/08/15/diary-202108/"/>
    <id>http://morris821028.github.io/2021/08/15/diary-202108/</id>
    <published>2021-08-15T03:00:00.000Z</published>
    <updated>2021-08-15T02:59:22.376Z</updated>
    
    <content type="html"><![CDATA[<p>「25 歲的年紀、35 歲的外表、45 歲的認知」那便是工程師的最高境界！</p><h2 id="在家工作"><a href="#在家工作" class="headerlink" title="在家工作"></a>在家工作</h2><h3 id="種花電信"><a href="#種花電信" class="headerlink" title="種花電信"></a>種花電信</h3><p>在家工作最痛苦的無非是網路不穩，炎炎夏日更要顧及數據機的穩定。不幸地，卻發生每晚的七、八點固定網路中斷，操起了畢生所學的技術檢修，仍無法理清頭緒。打給中華電信客服的熟練度，在那幾個夜晚裡迅速地提升，對於那一端的《夢中的婚禮》的好感度卻持續下降。檢修技師來了幾次，換了數據機仍然持續斷訊，連帶的 MOD 也跟著中斷。</p><p>白天工作 12 個小時用公司筆電都沒事，用個人電腦反倒出了狀況，就像在提醒我該休息了。技師後來也跑累了，</p><p>「斷網的時候打電話跟我說，遠端過去檢測」技師這麼說道。難道活在中英夾雜的圈子久了，連基本中文都聽不懂了。<br>「都斷網了，你要怎麼遠端？」帶有懷疑地口語回覆<br>「喔，也是」技師恍然大悟地應聲<br>看來又一個工作累壞的。<br>「接下來，麻煩斷網的時候您自己扛著筆電去每個中繼節點下指令診斷並紀錄吧」</p><p>突然明白，原來我的技術已經成長到可以檢修，後來把 WIFI 小烏龜換了一台，問題就解決了，也許是訊號回沖導致主要的數據機當機，至於為什麼是那個時間點呢？可能跟習慣有點關係，或者是監視器設定的影響。至於，為數據機採購的散熱風扇，就當作促進經濟吧，默默塞回弱電箱。</p><h3 id="那些事"><a href="#那些事" class="headerlink" title="那些事"></a>那些事</h3><p>最近由於線上購物和種花，還是會忍著接陌生電話 …</p><p>「這裡是 XX 銀行，有不錯的投資標的 …」銀行證卷打來<br>「抱歉，我喜歡現金」 另一端馬上就傳來了嘟嘟聲</p><p>「先生您好，我們提供車貸服務 …」來自車貸業務<br>「抱歉，我都用現金」一瞬間就嘟嘟聲</p><p>「您好，這是政府立案單身聯誼 …」來自單身聯誼<br>「都說了，我用現金」不耐煩地回應</p><p>嘟嘟 …，額不是，聽我解釋 …</p><p><img src="https://i.imgur.com/aFmuxeW.jpg" alt="《小林家的龍女僕》"></p><h2 id="工作狀況"><a href="#工作狀況" class="headerlink" title="工作狀況"></a>工作狀況</h2><p>這幾個月來，又被分配了不少面試候選，有別於先前的實體面談，疫情關係全都改成了線上面談。對我而言，線上面談更能清楚聽懂對方的表達，不受外表因素的影響。不意外地，仍有不少牛鬼蛇神混入其中，對於母校都失去信心。</p><p>看著一輪又一輪的自我介紹，對於新人而言，最自豪的大概只剩下碩士論文，變成口試委員的感覺實在不好受。談完都有一種「這樣也研究所畢業？」，而內心則想「資訊領域這麼大，實作算什麼了對吧？這個要進來訓練？」要是我當初這樣做簡報報告，肯定在台上被罵到下台休學。</p><p><img src="https://i.imgur.com/lYhtUV4.jpg" alt="《小林家的龍女僕》"></p><p>實在找不到完美合適的人，標準也逐一放寬，結論「原來當年的我，真的是主管所說的『挖到寶藏』」。接下來，不斷地被提醒「如果發覺其他人陷入泥濘，要適時地提醒」，要規劃教學文件，設計 SOP 流程，免得菜鳥們重蹈覆轍。可是名下沒人，說話也不是這麼地有威信，卻又不斷地被說「你要知道，你就是最厲害的，不用這麼謙虛。」但在我經驗裡，更厲害得人可多的呢。接下來，真的要接新人來管，而我才幾歲呢？</p><p><img src="https://i.imgur.com/EZmr7uK.jpg" alt="《小林家的龍女僕》"></p><h2 id="新的挑戰"><a href="#新的挑戰" class="headerlink" title="新的挑戰"></a>新的挑戰</h2><p>不知道哪根筋不對，突然跑去 O2 版上發文，試試水溫。</p><p>沒意外地，來信很熱誠，看到咱的真相卻？就像撲通一聲入水的小石，便也沒有了後續。從相親的那段經歷，體會到若想強行讓兩條線交會，沒有像黑洞那般的吸引力，是無法使其拐彎的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"># 標題 [徵女] 我要用什麼樣的速度，才能與你相遇。</div><div class="line"># 看板 AllTogether</div><div class="line"># 時間 Wed Aug 11 22:01:01 2021</div><div class="line">-------------------------------------------</div><div class="line"># 關於我</div><div class="line"></div><div class="line">1993/172/70 花蓮人 資工碩畢 台北工作 外商RD 有車位/沒車 母胎單 沒貸款</div><div class="line"></div><div class="line">不菸不酒也不帥，宅了不少動畫，就如標題「我要用什麼樣的速度，才能與你相遇」來自</div><div class="line">於《秒速5厘米》，日美韓劇都有涉獵，一點點鋼琴，一點點桌球。遊戲只有始終如一的</div><div class="line">楓之谷。</div><div class="line"></div><div class="line">基本上在家工作一年多了，也開始自己採買與下廚，不怎麼偏好美食，味覺遲鈍。大部分</div><div class="line">的技能點都跑去了專業技能上，距離成熟的社會人還有段距離，最近卻要在職場上煩惱人</div><div class="line">與人之間的溝通。</div><div class="line"></div><div class="line">國外出差幾次，目前沒有旅遊愛好。由於工作內容，習慣考慮周詳、思考最壞狀況，一旦</div><div class="line">要做就不能做差的處事態度。</div><div class="line"></div><div class="line">目前在林口附近，希望能交些朋友，彼此成長。</div><div class="line"></div><div class="line"># 關於你</div><div class="line"></div><div class="line">* 有專業技能養活自己</div><div class="line">* 不菸不酒</div></pre></td></tr></table></figure><h2 id="影集心得"><a href="#影集心得" class="headerlink" title="影集心得"></a>影集心得</h2><h3 id="《火神的眼淚》"><a href="#《火神的眼淚》" class="headerlink" title="《火神的眼淚》"></a>《火神的眼淚》</h3><p>台劇 《火神的眼淚》 像個刁民現形記，太過真實不敢直視。劇中許多有理說不清場景，離我們並不遠，應付著普羅大眾眼中的責任外，還得背負那不為人知的壓力。</p><p>研究所當助教時，體會只要敲錯一個指令，兩百名學生的成績權益會受到影響，平常提心吊膽處理著伺服器。沒 SOP 流程，也沒相關經驗，只靠過往經驗謹慎行事，每敲一個鍵前都要設下好幾條防線，最後那一刻，手還會抖。</p><p>工作也會相同感受，想到能理解接下來的實作正確性的人，估計是沒有了。但又為了交付幾個月前的承諾，這一個方法必須下去，目前看不出問題，不代表上戰場時不會發生問題，猶豫不決，應付客戶的 AE 得收砸出來的爛攤子。反而越接近收尾，決策就越慢 …</p><h3 id="《攻敵必救》"><a href="#《攻敵必救》" class="headerlink" title="《攻敵必救》"></a>《攻敵必救》</h3><p>《攻敵必救》 (Miss Sloane, 2016)</p><p>「有時我們行動不是為自己，而是相信是做對的事。」<br>「我不知道界線在哪裡，我一直不知道怎麼衡量」<br>「我寧願有正常生活，也不要這個技巧」</p><h3 id="《所以我和黑粉結婚了》"><a href="#《所以我和黑粉結婚了》" class="headerlink" title="《所以我和黑粉結婚了》"></a>《所以我和黑粉結婚了》</h3><p>韓劇 《所以我和黑粉結婚了》 ，出戲的配角台詞 「<strong> 我有一個新企劃，你沒有興趣一起？</strong>」</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;「25 歲的年紀、35 歲的外表、45 歲的認知」那便是工程師的最高境界！&lt;/p&gt;
&lt;h2 id=&quot;在家工作&quot;&gt;&lt;a href=&quot;#在家工作&quot; class=&quot;headerlink&quot; title=&quot;在家工作&quot;&gt;&lt;/a&gt;在家工作&lt;/h2&gt;&lt;h3 id=&quot;種花電信&quot;&gt;&lt;a hre
      
    
    </summary>
    
      <category term="手札日記" scheme="http://morris821028.github.io/categories/%E6%89%8B%E6%9C%AD%E6%97%A5%E8%A8%98/"/>
    
    
  </entry>
  
  <entry>
    <title>Company Ghost Story 公司鬼故事 12</title>
    <link href="http://morris821028.github.io/2021/08/14/work/company-ghost-story-12/"/>
    <id>http://morris821028.github.io/2021/08/14/work/company-ghost-story-12/</id>
    <published>2021-08-14T02:00:00.000Z</published>
    <updated>2021-08-14T02:58:44.014Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><h3 id="Fancy-OOP"><a href="#Fancy-OOP" class="headerlink" title="Fancy OOP"></a>Fancy OOP</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MSTAlgorithmEngine</span> </span>&#123;</div><div class="line">    JButton mApplyButton; <span class="comment">// why, ???</span></div><div class="line">    JPanel mUI;           <span class="comment">// why, ???</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DiffRecord</span> </span>&#123;</div><div class="line">    Action mMergeAction; <span class="comment">// why, ???</span></div><div class="line">    Action mShowAction;  <span class="comment">// why, ???</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">normalize</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">new</span> NormalizeAction().actionPerformed(<span class="keyword">new</span> ActionEvent(ActionEvent.PERFORMED));</div><div class="line">    &#125; <span class="comment">// I cannot deal with this shit anymore.</span></div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">NormalizeAction</span> <span class="keyword">extends</span> <span class="title">AbstractAction</span> </span>&#123;</div><div class="line">        <span class="comment">// real implementation for model class</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>資料歸資料，算法歸算法，別把 UI 牽扯進來。</p><h3 id="Shit-Cache"><a href="#Shit-Cache" class="headerlink" title="Shit Cache"></a>Shit Cache</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Engine</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CacheStructure sCache;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exec</span><span class="params">()</span> </span>&#123;</div><div class="line">        resetCache();</div><div class="line">        <span class="comment">// fill cache;</span></div><div class="line">    &#125; <span class="comment">// but, when will you clear sCache, sCache = null?</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>快取的污染啊，那些殘存的資料依舊卡在記憶體內，是無法被 GC 回收的。反而，造成下一個運行的更容易出現記憶體不足。</p><h3 id="Shit-Cache-in-Class"><a href="#Shit-Cache-in-Class" class="headerlink" title="Shit Cache in Class"></a>Shit Cache in Class</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dbo</span> <span class="keyword">extends</span> <span class="title">DbObject</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> CacheStructure mCache; <span class="comment">// for internal recursion, why this thing is here?</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getSomething</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// init cache</span></div><div class="line">        <span class="keyword">return</span> internalGetSomething(parameters);</div><div class="line">    &#125; <span class="comment">// but, when will you clear cache, cache = null?</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">internalGetSomething</span><span class="params">(parameters)</span> </span>&#123;</div><div class="line">        <span class="comment">// ...</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>別亂放你的資料結構，這關資料庫物件什麼事？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Java&quot;&gt;&lt;a href=&quot;#Java&quot; class=&quot;headerlink&quot; title=&quot;Java&quot;&gt;&lt;/a&gt;Java&lt;/h2&gt;&lt;h3 id=&quot;Fancy-OOP&quot;&gt;&lt;a href=&quot;#Fancy-OOP&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="工作應用" scheme="http://morris821028.github.io/categories/%E5%B7%A5%E4%BD%9C%E6%87%89%E7%94%A8/"/>
    
      <category term="鬼故事" scheme="http://morris821028.github.io/categories/%E5%B7%A5%E4%BD%9C%E6%87%89%E7%94%A8/%E9%AC%BC%E6%95%85%E4%BA%8B/"/>
    
    
      <category term="鬼故事" scheme="http://morris821028.github.io/tags/%E9%AC%BC%E6%95%85%E4%BA%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java JNI GC Thread Error (EINVAL)</title>
    <link href="http://morris821028.github.io/2021/07/29/java/java-jni-tls-error-2/"/>
    <id>http://morris821028.github.io/2021/07/29/java/java-jni-tls-error-2/</id>
    <published>2021-07-29T04:00:00.000Z</published>
    <updated>2021-07-29T03:20:15.916Z</updated>
    
    <content type="html"><![CDATA[<p>Keywords: JNI, Java, GC Thread, add_workers, static library, Thread Error</p><p>Solution: <code>-XX:+AdjustStackSizeForTLS</code> from JDK 14</p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>We cannot launch GC thread of JVM from JNI. And, it shows</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[os,thread] Failed to start thread - pthread_create failed (EINVAL) <span class="keyword">for</span> attributes: stacksize: 1024k, guardsize: 0k, detached.</div></pre></td></tr></table></figure><p>The main reason is the glibc bugs for native C code issues. For example, we allocate thread-local variables by static library linking.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">__thread <span class="keyword">int</span> buf[<span class="number">1048576</span>];</div><div class="line"><span class="keyword">thread_local</span> <span class="keyword">int</span> buf[<span class="number">1048576</span>];</div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> omp threadprive(buf);</span></div></pre></td></tr></table></figure><p>And then, glibc 2.12 will move them on stack, and require minimum stack size at least 1024k bytes. But, the default configuration JVM of JDK11 will minimum stacksize to be 1024k bytes as default in Linux OS. Therefore, the <code>pthread_create</code> throws the error <code>EINVAL</code> for specific stacksize setting.</p><h2 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h2><p><a href="https://www.oracle.com/java/technologies/javase/14all-relnotes.html" target="_blank" rel="external">https://www.oracle.com/java/technologies/javase/14all-relnotes.html</a></p><p>The glibc library allocates some thread-local storage (TLS) in the stack of a newly created thread, leaving less stack than requested for the thread to do its work. This is particularly a problem for threads with small stack sizes. It is an inherited issue from a well-known glibc problem, ‘Program with large TLS segments fail’ [0] and has been observed in Java applications. In one of the reported JVM failure instances, the issue manifests as a StackOverflowError on the process reaper thread, which has a small stack size. The java.lang.Thread constructor enables users to specify the stack size for a new thread. The created thread may encounter the TLS problem when the specified size is too small to accommodate the on-stack TLS blocks.</p><p>In JDK 8, a system property, <code>jdk.lang.processReaperUseDefaultStackSize</code>, was introduced to address the TLS issue only for reaper threads. Setting the property gives a bigger stack size to the reaper threads.</p><p>To address the issue for all threads, a general purpose workaround was implemented in Java which adjusts thread stack size for TLS. It can be enabled by using the <code>AdjustStackSizeForTLS</code> command-line option:</p><p>When creating a new thread, if <code>AdjustStackSizeForTLS</code> is true, the static TLS area size is added to the user requested stack size. <code>AdjustStackSizeForTLS</code> is disabled by default.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>整合進大型程式時，要多觀察靜態編譯的部分，如果有一些 TLS 的宣告，則會增加其他預設執行緒的最小使用堆疊大小。而 JVM 又傾向使用最少資源去完成，則很容易在計算最小資源時發生問題。</p><p>如果去查閱 JDK15 的 <a href="https://github.com/openjdk/jdk15/blob/master/src/hotspot/os/linux/os_linux.cpp" target="_blank" rel="external">代碼  os_linux.cpp</a>  時，有一段到動態鏈結函數庫 glibc 的詢問最低需求來解決此問題。這一段牽涉到 hack 技巧，偷偷利用 symbol 爬出私有函數，不算正常操作行為。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// On Linux, glibc places static TLS blocks (for __thread variables) on</span></div><div class="line"><span class="comment">// the thread stack. This decreases the stack size actually available</span></div><div class="line"><span class="comment">// to threads.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// For large static TLS sizes, this may cause threads to malfunction due</span></div><div class="line"><span class="comment">// to insufficient stack space. This is a well-known issue in glibc:</span></div><div class="line"><span class="comment">// http://sourceware.org/bugzilla/show_bug.cgi?id=11787.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// As a workaround, we call a private but assumed-stable glibc function,</span></div><div class="line"><span class="comment">// __pthread_get_minstack() to obtain the minstack size and derive the</span></div><div class="line"><span class="comment">// static TLS size from it. We then increase the user requested stack</span></div><div class="line"><span class="comment">// size by this TLS size.</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// Due to compatibility concerns, this size adjustment is opt-in and</span></div><div class="line"><span class="comment">// controlled via AdjustStackSizeForTLS.</span></div><div class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">size_t</span> <span class="params">(*GetMinStack)</span><span class="params">(<span class="keyword">const</span> <span class="keyword">pthread_attr_t</span> *attr)</span></span>;</div><div class="line"></div><div class="line">GetMinStack _get_minstack_func = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">get_minstack_init</span><span class="params">()</span> </span>&#123;</div><div class="line">  _get_minstack_func =</div><div class="line">        (GetMinStack)dlsym(RTLD_DEFAULT, <span class="string">"__pthread_get_minstack"</span>);</div><div class="line">  log_info(os, thread)(<span class="string">"Lookup of __pthread_get_minstack %s"</span>,</div><div class="line">                       _get_minstack_func == <span class="literal">NULL</span> ? <span class="string">"failed"</span> : <span class="string">"succeeded"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Returns the size of the static TLS area glibc puts on thread stacks.</span></div><div class="line"><span class="comment">// The value is cached on first use, which occurs when the first thread</span></div><div class="line"><span class="comment">// is created during VM initialization.</span></div><div class="line"><span class="function"><span class="keyword">static</span> size_t <span class="title">get_static_tls_area_size</span><span class="params">(<span class="keyword">const</span> <span class="keyword">pthread_attr_t</span> *attr)</span> </span>&#123;</div><div class="line">  <span class="keyword">size_t</span> tls_size = <span class="number">0</span>;</div><div class="line">  <span class="keyword">if</span> (_get_minstack_func != <span class="literal">NULL</span>) &#123;</div><div class="line">    <span class="comment">// Obtain the pthread minstack size by calling __pthread_get_minstack.</span></div><div class="line">    <span class="keyword">size_t</span> minstack_size = _get_minstack_func(attr);</div><div class="line"></div><div class="line">    <span class="comment">// Remove non-TLS area size included in minstack size returned</span></div><div class="line">    <span class="comment">// by __pthread_get_minstack() to get the static TLS size.</span></div><div class="line">    <span class="comment">// In glibc before 2.27, minstack size includes guard_size.</span></div><div class="line">    <span class="comment">// In glibc 2.27 and later, guard_size is automatically added</span></div><div class="line">    <span class="comment">// to the stack size by pthread_create and is no longer included</span></div><div class="line">    <span class="comment">// in minstack size. In both cases, the guard_size is taken into</span></div><div class="line">    <span class="comment">// account, so there is no need to adjust the result for that.</span></div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="comment">// Although __pthread_get_minstack() is a private glibc function,</span></div><div class="line">    <span class="comment">// it is expected to have a stable behavior across future glibc</span></div><div class="line">    <span class="comment">// versions while glibc still allocates the static TLS blocks off</span></div><div class="line">    <span class="comment">// the stack. Following is glibc 2.28 __pthread_get_minstack():</span></div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="comment">// size_t</span></div><div class="line">    <span class="comment">// __pthread_get_minstack (const pthread_attr_t *attr)</span></div><div class="line">    <span class="comment">// &#123;</span></div><div class="line">    <span class="comment">//   return GLRO(dl_pagesize) + __static_tls_size + PTHREAD_STACK_MIN;</span></div><div class="line">    <span class="comment">// &#125;</span></div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="comment">// The following 'minstack_size &gt; os::vm_page_size() + PTHREAD_STACK_MIN'</span></div><div class="line">    <span class="comment">// if check is done for precaution.</span></div><div class="line">    <span class="keyword">if</span> (minstack_size &gt; (<span class="keyword">size_t</span>)os::vm_page_size() + PTHREAD_STACK_MIN) &#123;</div><div class="line">      tls_size = minstack_size - os::vm_page_size() - PTHREAD_STACK_MIN;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  log_info(os, thread)(<span class="string">"Stack size adjustment for TLS is "</span> SIZE_FORMAT,</div><div class="line">                       tls_size);</div><div class="line">  <span class="keyword">return</span> tls_size;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Keywords: JNI, Java, GC Thread, add_workers, static library, Thread Error&lt;/p&gt;
&lt;p&gt;Solution: &lt;code&gt;-XX:+AdjustStackSizeForTLS&lt;/code&gt; from J
      
    
    </summary>
    
      <category term="工作應用" scheme="http://morris821028.github.io/categories/%E5%B7%A5%E4%BD%9C%E6%87%89%E7%94%A8/"/>
    
      <category term="Java" scheme="http://morris821028.github.io/categories/%E5%B7%A5%E4%BD%9C%E6%87%89%E7%94%A8/Java/"/>
    
    
      <category term="Java" scheme="http://morris821028.github.io/tags/Java/"/>
    
      <category term="JNI" scheme="http://morris821028.github.io/tags/JNI/"/>
    
      <category term="TLS" scheme="http://morris821028.github.io/tags/TLS/"/>
    
  </entry>
  
  <entry>
    <title>Company Ghost Story 公司鬼故事 11</title>
    <link href="http://morris821028.github.io/2021/07/29/work/company-ghost-story-11/"/>
    <id>http://morris821028.github.io/2021/07/29/work/company-ghost-story-11/</id>
    <published>2021-07-29T02:00:00.000Z</published>
    <updated>2021-07-29T02:38:29.048Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><h3 id="Over-Overload"><a href="#Over-Overload" class="headerlink" title="Over Overload"></a>Over Overload</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">OhMyGod</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;System.out.println(<span class="string">"A"</span>);&#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String t)</span> </span>&#123;System.out.println(<span class="string">"B"</span>);&#125;</div><div class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">(T[] t)</span> </span>&#123;System.out.println(<span class="string">"C"</span>);&#125;</div><div class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">(T t)</span> </span>&#123;System.out.println(<span class="string">"D"</span>);&#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... t)</span> </span>&#123;System.out.println(<span class="string">"E"</span>);&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">new</span> OhMyGod().run();</div><div class="line">        <span class="keyword">new</span> OhMyGod().run(<span class="keyword">new</span> String[<span class="number">0</span>]);</div><div class="line">        <span class="keyword">new</span> OhMyGod().run(<span class="string">"1"</span>);</div><div class="line">        <span class="keyword">new</span> OhMyGod().run(<span class="string">"1"</span>, <span class="string">"2"</span>);</div><div class="line">    &#125;</div><div class="line">&#125; <span class="comment">// AEBE, little strange</span></div></pre></td></tr></table></figure><h3 id="One-Format-Multiple-Ways"><a href="#One-Format-Multiple-Ways" class="headerlink" title="One-Format Multiple-Ways"></a>One-Format Multiple-Ways</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileIn</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isCSV; <span class="comment">// why not enum</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isXML;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isJSON;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIsCSV</span><span class="params">(<span class="keyword">boolean</span> e)</span> </span>&#123;isCSV = e;&#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIsXML</span><span class="params">(<span class="keyword">boolean</span> e)</span> </span>&#123;isXML = e;&#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIsJSON</span><span class="params">(<span class="keyword">boolean</span> e)</span> </span>&#123;isJSON = e;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">import</span><span class="params">(File file)</span> </span>&#123;</div><div class="line">        <span class="comment">// why not if-else</span></div><div class="line">        <span class="keyword">if</span> (isCSV) CSVIn(file); <span class="comment">//??? </span></div><div class="line">        <span class="keyword">if</span> (isXML) XMLIn(file); <span class="comment">//???</span></div><div class="line">        <span class="keyword">if</span> (isJSON) JSONIn(file); <span class="comment">//???</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Java&quot;&gt;&lt;a href=&quot;#Java&quot; class=&quot;headerlink&quot; title=&quot;Java&quot;&gt;&lt;/a&gt;Java&lt;/h2&gt;&lt;h3 id=&quot;Over-Overload&quot;&gt;&lt;a href=&quot;#Over-Overload&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="工作應用" scheme="http://morris821028.github.io/categories/%E5%B7%A5%E4%BD%9C%E6%87%89%E7%94%A8/"/>
    
      <category term="鬼故事" scheme="http://morris821028.github.io/categories/%E5%B7%A5%E4%BD%9C%E6%87%89%E7%94%A8/%E9%AC%BC%E6%95%85%E4%BA%8B/"/>
    
    
      <category term="鬼故事" scheme="http://morris821028.github.io/tags/%E9%AC%BC%E6%95%85%E4%BA%8B/"/>
    
  </entry>
  
  <entry>
    <title>疫情下的工作變化</title>
    <link href="http://morris821028.github.io/2021/06/21/diary-202106/"/>
    <id>http://morris821028.github.io/2021/06/21/diary-202106/</id>
    <published>2021-06-21T03:00:00.000Z</published>
    <updated>2021-06-21T04:18:34.268Z</updated>
    
    <content type="html"><![CDATA[<h2 id="居家工作"><a href="#居家工作" class="headerlink" title="居家工作"></a>居家工作</h2><p>去年開始越來越少去公司的我，遇到四月的疫情爆發，便順理成章地不去公司。以前還會偶爾跑一趟台北，完全不用去公司的感覺挺不錯的，但是其他同事可能就無法接受，畢竟租屋或住家並沒有理想的工作環境，沒有相應的螢幕、鍵盤、滑鼠麥克風等配備，筆電雖然五臟俱全，但在開發效率上就顯得不足。</p><p>更無法想像的是，除了工作日以外，一般居家都沒有這些基礎配備，這群現充們都在做什麼？實在令人稱羨。反觀，對我而言，那些是維持生命的器材。想著搬離租屋環境，於是下訂了 Dell P2721Q 這款 4K 螢幕來開發，得處理渲染效能與硬體上的問題，就得多一種硬體設備來測試，連帶修整了耳機麥克風，好好地進行整線配置。</p><p>公司終究是不屬於我的地方，座位上的雜物一天比一天更空。沒法像其他人，把公司當家，可以堆一大堆用品。在家有自己的小天地，好好投資的感覺相當踏實，至少省去了以後搬走的困擾。</p><h2 id="薪資談判"><a href="#薪資談判" class="headerlink" title="薪資談判"></a>薪資談判</h2><p><img src="https://i.imgur.com/UTrS1nK.jpg" alt="「不對，是能有多少思考本質的能力」—《東大特訓班2》"></p><p>從去年開始，就不斷跟主管講薪資太低，不管是我的、還是同事的，一直找不到中意的人才，肯定有它的道理在。參加會議的時候，Meet.jobs 公司開薪資起跳就兩百萬，先不論中間有其他額外的契約條件，起碼還是有可談的條件。年底又有一波 Google 大批招人，那時跟主管警示了一次，公司到底要收怎麼樣的人，只在意找人，看起來留人是未來的課題。難道，只想辦法讓台灣分公司突破五百人，還開個慶祝會，不考慮到底是找什麼樣的人嗎？在台北分布的我們，卻感受不出來那個向心力，也沒有什麼實體慶祝會。</p><p>不少半導體大廠很賺錢，像 MTK 就不斷地在新聞打廣告，碩士起薪 150 萬、博士起薪 200 萬。我們做了什麼、能做什麼？將這些訊息向上呈報，也不見聲響。早些年，說幫我談有博士資格的起薪，現在回過頭來看，只能算勉強達標吧。</p><p>外傳我們部門很挑人，的確有很多人工智慧、機器學習、深度學習的 green hand 被我們刷掉，一開始的確按照 Google 等級的難題在找特殊領域的奇才，根據基礎底子標準來刷掉。現在面試只考一個費波納西數列，牛鬼蛇神馬上現身，leetcode 上的題型背一背是趨勢，那就偏不考那種制式化的題目，沒有明確要怎麼做，就沒有標準答案，就看心中的定見有沒有特色。</p><p>的確，這幾個月來陸續有人離開，但仍不想隨便補人，就怕未來鬼故事太多。可能不會有鬼故事，就怕產品原地打轉。換換別人來面試吧，線上面試這種考驗人心的方法，沒辦法預設人性本善，被騙了太多次，最後工作量暴增的我，沒有特別在期限內有特別突出的開發，反倒收拾不少殘局。</p><h2 id="工作突破"><a href="#工作突破" class="headerlink" title="工作突破"></a>工作突破</h2><p>半導體製程的演進帶動了一堆需求，不只效能要好，還要記憶體用量正常，俗話說一點就是要跑得動。越來越多客戶，開始規劃要將近數億的數量級的資料庫管理，本身早已處於高度壓縮的資料庫設計，但會這樣的設計影響即時的運算效能、開發難度、以及設計彈性。</p><p>因此，最近幾篇的技術文章都在探討記憶體的使用，甚至靠這些設計概念，滿足了原先的彈性，去除了雜湊表，效能還提升，內存使用更少，數方雙贏的局面，讓產品走得更久。目前產品已經滿足所有需求下，回歸了正常的 capability。</p><p>不知道為什麼，開心不起來。</p><p><img src="https://i.imgur.com/GI2PeiQ.jpg" alt="《86 不存在的戰區》"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;居家工作&quot;&gt;&lt;a href=&quot;#居家工作&quot; class=&quot;headerlink&quot; title=&quot;居家工作&quot;&gt;&lt;/a&gt;居家工作&lt;/h2&gt;&lt;p&gt;去年開始越來越少去公司的我，遇到四月的疫情爆發，便順理成章地不去公司。以前還會偶爾跑一趟台北，完全不用去公司的感覺挺不錯的，
      
    
    </summary>
    
      <category term="手札日記" scheme="http://morris821028.github.io/categories/%E6%89%8B%E6%9C%AD%E6%97%A5%E8%A8%98/"/>
    
    
  </entry>
  
  <entry>
    <title>Company Ghost Story 公司鬼故事 10</title>
    <link href="http://morris821028.github.io/2021/06/21/work/company-ghost-story-10/"/>
    <id>http://morris821028.github.io/2021/06/21/work/company-ghost-story-10/</id>
    <published>2021-06-21T02:00:00.000Z</published>
    <updated>2021-06-22T23:10:56.517Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><h3 id="Compare-Function"><a href="#Compare-Function" class="headerlink" title="Compare Function"></a>Compare Function</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Collections.sort(arr, (x, y) -&gt; (<span class="keyword">int</span>) (x.cost - y.cost));</div><div class="line">Collections.sort(arr, (x, y) -&gt; Long.valueOf(x).compareTo(y));</div><div class="line">Collections.sort(arr, (x, y) -&gt; (<span class="keyword">int</span>) Math.round(x.cost - y.cost));</div><div class="line"></div><div class="line"><span class="comment">// why not use official methods?</span></div><div class="line">Collections.sort(arr, (x, y) -&gt; Double.compare(x.cost, y.cost));</div><div class="line">Collections.sort(arr, (x, y) -&gt; Long.compare(x, y));</div></pre></td></tr></table></figure><p>別鬧了，會 overflow/underflow，數量一大，每一個排序都在丟例外給我啊。</p><h3 id="Partition-Function"><a href="#Partition-Function" class="headerlink" title="Partition Function"></a>Partition Function</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Optimizer</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">avgX</span><span class="params">(ArrayList&lt;Point&gt; pts)</span> </span>&#123;</div><div class="line">        ArrayList&lt;Long&gt; x = <span class="keyword">new</span> ArrayList&lt;&gt;(pts.size());</div><div class="line">        <span class="keyword">for</span> (Point p : pts)</div><div class="line">            x.add(p.x);</div><div class="line">        <span class="keyword">return</span> avg(x);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">avg</span><span class="params">(ArrayList&lt;Long&gt; xs)</span> </span>&#123;</div><div class="line">        <span class="keyword">long</span> sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (Long x : xs)</div><div class="line">            sum += x;</div><div class="line">        <span class="keyword">return</span> sum / xs.size();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// ... why not merge avg() into avgX()?</span></div></pre></td></tr></table></figure><p>每次都要額外建一個陣列，而且這個函數只有被內部的單一函數呼叫，函數切這麼細，但是效能卻爛掉。</p><h3 id="Try-Catch-vs-If-Else"><a href="#Try-Catch-vs-If-Else" class="headerlink" title="Try-Catch vs. If-Else"></a>Try-Catch vs. If-Else</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parser</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addChar</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            que[index] = c;</div><div class="line">        &#125; <span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;</div><div class="line">            doubleArray();</div><div class="line">            que[index] = c;</div><div class="line">        &#125;</div><div class="line">        index++;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// why not just write if-else statements, it's really hard to maintain your code.</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parser</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addChar</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (index &gt;= que.length)</div><div class="line">            doubleArray(index);</div><div class="line">        que[index] = c;</div><div class="line">        index++;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如果在修改這幾段代碼的時候，還得經常考慮例外處理是怎麼做的，這寫法真的太奇葩。要是開剖析器去檢查，會經常看到例外出現，那到底是好事還壞事？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Java&quot;&gt;&lt;a href=&quot;#Java&quot; class=&quot;headerlink&quot; title=&quot;Java&quot;&gt;&lt;/a&gt;Java&lt;/h2&gt;&lt;h3 id=&quot;Compare-Function&quot;&gt;&lt;a href=&quot;#Compare-Function&quot; class=&quot;head
      
    
    </summary>
    
      <category term="工作應用" scheme="http://morris821028.github.io/categories/%E5%B7%A5%E4%BD%9C%E6%87%89%E7%94%A8/"/>
    
      <category term="鬼故事" scheme="http://morris821028.github.io/categories/%E5%B7%A5%E4%BD%9C%E6%87%89%E7%94%A8/%E9%AC%BC%E6%95%85%E4%BA%8B/"/>
    
    
      <category term="鬼故事" scheme="http://morris821028.github.io/tags/%E9%AC%BC%E6%95%85%E4%BA%8B/"/>
    
  </entry>
  
  <entry>
    <title>前思後想 新居落成</title>
    <link href="http://morris821028.github.io/2021/05/30/diary-202105/"/>
    <id>http://morris821028.github.io/2021/05/30/diary-202105/</id>
    <published>2021-05-30T06:00:00.000Z</published>
    <updated>2021-05-30T23:58:00.409Z</updated>
    
    <content type="html"><![CDATA[<p>截至這半年來，人生成就上沒多大的變化，除了工作也沒有其他說得上嘴的娛樂。</p><h2 id="前思後想"><a href="#前思後想" class="headerlink" title="前思後想"></a>前思後想</h2><p>相親了幾次，過年那段時間，對方趁著女兒回家一趟，就順道提個活動認識一下。但對方還沒大學畢業，大概也想不到那一塊去，而我這個宅宅更不是女性首選清單。活動說要聊一聊，但專心在完全不擅長的活動內容上，讓我比較舒心。畢竟，那些小女孩還有大把的時間過濾清單，又聽女方經常說「XXXX，沒別的意思」此話一落，我就真的沒什麼意思了。</p><p>之後在咖啡廳見了一次，在對方家人婚禮也見了一次，被拉去合照，被抓去婚宴台上參與活動。此時，內心滿是焦慮，對方似乎就沒那個意思。在這幾次過程中，感覺都是對方父母滿意，實際上一來一往感受不出任何互動。反倒是，與未曾蒙面的女網友討論相親一事時，互相揶揄相親經驗，這樣算起來比較像朋友。</p><blockquote><p>「交個異性朋友很難吼，之前還笑我 …」<br>「那我們當初怎麼當朋友的？」<br>「我也不是很清楚」</p></blockquote><p><img src="https://i.imgur.com/XA03zZl.jpg" alt="「我也不是很清楚」—《悠悠哉哉少女日和 Nonstop》"></p><blockquote><p>「相較於幾年前，你也變化得很多，聊起來的感覺差很多。」對方說道</p></blockquote><p>倒是覺得自己沒什麼變化，只是更會搭唱罷了。沒機會收到對方的抱怨或幹話，其他話題可是一竅不通，當然感受不一樣。想想以前的話題，不是玩就是花錢，我完全搭不上邊。</p><h2 id="新居落成"><a href="#新居落成" class="headerlink" title="新居落成"></a>新居落成</h2><p>今年一月底的時候，決定買了一間小華廈，三房兩廳兩衛含車位。主管不給力的情況下，當然是買不起大台北區，反正也遲遲交不到女友，還是得過自己的生活，老是跟著高中同學在台北合租，每個都帶女友一起生活，日久傷情。過得很簡單，卻稱不上好，找不到一個理由過得更好。縱使街道上車水馬龍，卻無比孤單。從去年夏天一個人運動跌倒，提著半面血痕走了一大段路回租屋處，無法言語傳達的感受，更促使著想離開的心境。</p><p>在疫情剛開始的那個時候，便約了房仲看了幾十間，也在盤算手頭上有多少錢，到底要不要貸款，要的話要貸多少？那時看的房子，還無法符合經濟條件，突然間題目馬上難起來。不同於同事們一開始就生活在台北，對地區生活很熟悉，更不需要在外租屋。大多數搬出去的原因都是要跟女友同居，或者想嘗試獨立生活，心生羨慕啊。要是我老家在台北，大概會被罵得連這點錢都不省，有家還不住。</p><p>到了一月中，帶著爸媽又跑去看了一輪，馬上就下決定。當天斡旋，隔周簽約，原本預計 45 天內交屋，但中間遇農曆新年，又多拖延了一週。不斷地與房仲、代書接洽相關事宜，在每一個階段跑銀行處理履保帳戶。再跟家人借點錢，畢竟身為一個工程師的貸款利率還是高了點，並且還是浮動利率。此時都在懊悔，要是有一個軍公教的另一半，就不用這麼傷腦筋。</p><p><img src="https://i.imgur.com/5HRkE1C.jpg" alt="「一直以來，我都是急切地想讓自己一個人解決所有問題」—《無職轉生》"></p><p>不貸款情況下，再三確定不跑銀行貸款，三催四請提早一周，在三月中交了屋。交屋前一週把網路申請好，交屋當日下午，床櫃子書桌都請家俱行老闆一次服務到位，同樣地，晚上家電冰箱電視洗衣機，全國電子安裝人員一次做好。家裡要求做事要果斷下決定，前幾周跑了不少店家去想要怎麼布置，又跟房仲約了幾次量測房子格局。最後，有幾處稱不上滿意，但以我一個人的人生經驗下這類決定，已經盡力了。</p><p>當天就這麼在新家睡了，隔天再跟老爸北上跑一趟，一次把租屋處的雜物全部清空。爬老公寓五樓，真不是鬧著玩的，還得扛著自己大包小包的雜物。很早就設想自己會搬家，租屋就一直不敢買太多東西，但仍然要爬個幾十趟，不意外地，隔天的腿抬不起來。</p><p><img src="https://i.imgur.com/5NtJdyE.jpg" alt="《悠悠哉哉少女日和 Nonstop》"></p><p>熟悉 <strong>一個人的真生活</strong>。一開始倒垃圾時，左鄰右舍都很在意地問「一個人生活還得煮飯倒廚餘？」這一個問題，我也有。沒有台北那樣繁榮，下樓就有得吃，在這裡自己煮點也沒那麼誇張吧？一直都是粗養，美食品味造成影響，心理狀態沒有問題。陸續的幾個月裡，處理一些家俱的毛毛角角，浴室的排水排空清潔，聯絡安裝冷氣與清潔。跑了好幾趟五金行，處理居家生活細節，得全部親自動手做。</p><p>開個宴席請公司同事們吃個飯，約離職的大姊姊回來聚聚，其他離職的小夥伴都在美國就有點小難過。再邀邀一些朋友來家裡作客，聊聊一些生活經驗，聽聞學長們只想在台北買，也即將在台北市買房子，突然發現自己也不是做了大決定，都不及學長賺的一半，痛心明白，難怪我還找不到另一半。</p><p>當然相親一事尚未結束，偶爾還是有一點風聲，就是一點風聲。就連家俱行老闆都在幫我安排對象，也都是對方父母覺得不錯，而對方不是在學，就是職場菜鳥，自然而然沒什麼反應。以這幾個對象相處的經驗，發現都有一個共通點，儘管當下馬上回覆，都是每天定點定時才會得到訊息，隔天還算好了，有時隔幾周應該是排到深淵去了。</p><p>謝謝你，讓我知道我還不夠好。</p><h2 id="交接租屋"><a href="#交接租屋" class="headerlink" title="交接租屋"></a>交接租屋</h2><p>一月時說要買房子離開原本的租屋處，室友都說至少還要半年，覺得不可能這麼快，似乎都沒打算煩惱。三月一離開，租賃契約的一半都不到，只能麻煩其他室友找新室友來補位，沒想到房東馬上就說要漲房租。直到四月補位，五月底一知道調漲的金額，我想在這個疫情中做這樣的調整，多半不合情理，也許是看我窮都不漲吧。</p><p>合租也有不少缺點，儘管自己自發性地打掃，代收信件、繳納水電瓦斯費用、處理網路配備等，公共區域多出來的物品，都不是屬於我的卻一直被嫌很亂，自己用的電器放在房裡電都沒插，都可以被房東罵危險。明明一開始租屋就有的地板污漬，卻一直被指責說是我們搞出來的，自己一個人花一個下午，獨自坐在地板上清潔。室友堆積的雜物，一個人花了好幾天分批爬上爬下拿去垃圾車丟掉。</p><p>房東其實沒有說可以長時間養貓，至於室友鑽空子的行為，導致整個生活空間都有貓毛，不少地方被抓破，紗窗被抓破還要我補，你不怕蚊子，我怕啊。就看誰的忍受度低會先掃地，自然也會有自掃門前雪的情境，當然這也算沒什麼生活常識吧，沒有特別的惡意。長時間把濕抹布放在木頭地板上，叫完瓦斯，戶外燈也沒關，紗窗也沒拉上，對其他人可能覺得沒什麼吧。小事情積多，就見仁見智了。</p><h2 id="出個遠門"><a href="#出個遠門" class="headerlink" title="出個遠門"></a>出個遠門</h2><p>生活距離台北有段路，其實有邀約也很懶得去趟台北。四月底，有人約我去文博會看展覽，想順道吃個飯。遲遲沒有答應，只是因為六日都在處理修繕雜事，不確定還有什麼沒有做。那天一大早，發現事情都忙得差不多了，就起身出發。能約什麼人呢？想著定點才回覆的任務，等到有消息就隔天了，淡定地一個人出發。</p><p>有人會很好奇是不是約妹子出門，要說有也算有，但要說沒有，也算沒有。逛完展覽又跑了趟淡水，想著幾個月前一個人跑到了淡水，想著妹子約不出來，一個人去那邊看看房子和生活機能，提前看看餐廳，說不定哪天有機會約人吃飯，打量著很多很多的事項，可惜都派不上用場。而跟一些人一起去淡水，非常簡單地在路上走走，也不需要吃什麼特別的餐廳，隨處逛逛商店聊聊幹話，坐在河畔旁等待，就這麼樸素。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;截至這半年來，人生成就上沒多大的變化，除了工作也沒有其他說得上嘴的娛樂。&lt;/p&gt;
&lt;h2 id=&quot;前思後想&quot;&gt;&lt;a href=&quot;#前思後想&quot; class=&quot;headerlink&quot; title=&quot;前思後想&quot;&gt;&lt;/a&gt;前思後想&lt;/h2&gt;&lt;p&gt;相親了幾次，過年那段時間，對方趁著女
      
    
    </summary>
    
      <category term="手札日記" scheme="http://morris821028.github.io/categories/%E6%89%8B%E6%9C%AD%E6%97%A5%E8%A8%98/"/>
    
    
  </entry>
  
  <entry>
    <title>Java 優化內存使用 組合篇</title>
    <link href="http://morris821028.github.io/2021/05/30/java/java-memory-optimization-2/"/>
    <id>http://morris821028.github.io/2021/05/30/java/java-memory-optimization-2/</id>
    <published>2021-05-30T05:00:00.000Z</published>
    <updated>2021-05-30T03:45:06.477Z</updated>
    
    <content type="html"><![CDATA[<h2 id="整數映射-Integer-Mapping"><a href="#整數映射-Integer-Mapping" class="headerlink" title="整數映射 (Integer Mapping)"></a>整數映射 (Integer Mapping)</h2><p>算法經常會使用整數映射到物件，而整數範圍就會影響到內存。為了技術性能 (capability)，直接宣告 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Map&lt;Long, Object&gt; a;</div><div class="line">TLongObjectMap&lt;Object&gt; b;</div></pre></td></tr></table></figure><p>以應付未來變化。考慮到鍵值欄位，實作上建立 <span>$\mathcal{O}(n)$</span><!-- Has MathJax --> <code>long[]</code>。在初始狀態下，大多情境只使用 <code>int[]</code> 的情況。為此，我們考慮分流使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MMap</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    TLongObjectMap&lt;T&gt; longMap;</div><div class="line">    TIntObjectMap&lt;T&gt; intMap;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>使用這樣子的概念，通用狀態可以降低 <span>$50\%$</span><!-- Has MathJax --> 內存，均勻分布情況則可以降低 <span>$25\%$</span><!-- Has MathJax -->。</p><h2 id="陣列替代-Array-Substitute"><a href="#陣列替代-Array-Substitute" class="headerlink" title="陣列替代 (Array Substitute)"></a>陣列替代 (Array Substitute)</h2><p>前一篇，我們提到了將 <code>ArrayList</code> 換成最原生的 <code>T[]</code>。更進一步，以前寫 C 的時候，壓根不在意 <code>T[].length</code> 這一個需求，因為題目已經寫死在某個全區變數裡。可在 Java 裡頭，我們宣告不出純粹的陣列，只能硬生生多出 <span>$4 \; \text{bytes}$</span><!-- Has MathJax -->。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Scheme</span> </span>&#123;</div><div class="line">    K[] keys; <span class="comment">// as known, keys.length = 10</span></div><div class="line">    V[] vals; <span class="comment">// as known, vals.length = 10</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>換個方向思考，那朝著減少試試。進行陣列雙向合併</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Scheme</span> </span>&#123;</div><div class="line">    Object[] keyval; <span class="comment">// [key0, key1, ..., val1, val0]</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在 <code>Scheme</code> 物件中，我們減少了 <span>$8 \; \text{bytes}$</span><!-- Has MathJax --> 的額外資訊。但在使用時， casting 是個開銷。</p><h2 id="欄位轉移-Field-Translation"><a href="#欄位轉移-Field-Translation" class="headerlink" title="欄位轉移 (Field Translation)"></a>欄位轉移 (Field Translation)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Map&lt;T, String&gt; map;</div><div class="line">map.put(a, <span class="string">"MARKED"</span>);</div><div class="line">map.put(b, <span class="string">"UNMARKED"</span>);</div></pre></td></tr></table></figure><p>當我們還沒有仔細規劃結構時，直接用 <strong>has-A</strong> 的精神去寫第一步。回過頭來，就會造成不少零散的映射出現。如果映射使用雜湊實作，而不是樹的話，整體的記憶體效率會低個 <span>$33\%$</span><!-- Has MathJax -->，因為無法塞滿所有的 hash table 中的桶子。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">T</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    Object userData;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>那為了提升記憶體效率，先檢查是不是所有的項目，幾乎都在這個映射裡面。如果是的話，將這個欄位轉移到目標類別上。看起來很不美觀，但進一步的資料佈局是很可觀的，甚至可以比雜湊 <span>$\mathcal{O}(1)$</span><!-- Has MathJax --> 更快的存取。</p><h2 id="卸載策略-Offloading-Strategy"><a href="#卸載策略-Offloading-Strategy" class="headerlink" title="卸載策略 (Offloading Strategy)"></a>卸載策略 (Offloading Strategy)</h2><p>在平行處理中，我們可以劃分成不同數量級的策略。在小規模下，嘗試先以 CPU 計算，若發現更大規模，將資料卸載給其他異質計算單元來完成。同樣的道理，對於資料結構也能更近一步地劃分。</p><p>如集合實作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MSet</span> </span>&#123;</div><div class="line">    Object mRaw; <span class="comment">// size &lt; 8: LinkedList; otherwise, HashSet</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>由於 Java 中的 <code>HashSet&lt;T&gt;</code> 並不是單一欄位的實作，實值為 <code>HashMap&lt;T, T&gt;</code>，相較於 C/C++ 的狀態，空間多了兩、三成。我們可以簡單使用 <code>LinkedList</code> 取代 <code>HashSet</code>，並且避免小規模數據中未能填滿 hash table 的狀態。在元素個數為一時，串列的記憶體效率 <span>$100 \%$</span><!-- Has MathJax -->，但雜湊集合只有 <span>$12.5 \%$</span><!-- Has MathJax -->。換句話說，有時候數據分布很極端，內存用量就差了十倍。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;整數映射-Integer-Mapping&quot;&gt;&lt;a href=&quot;#整數映射-Integer-Mapping&quot; class=&quot;headerlink&quot; title=&quot;整數映射 (Integer Mapping)&quot;&gt;&lt;/a&gt;整數映射 (Integer Mapping)&lt;/
      
    
    </summary>
    
      <category term="工作應用" scheme="http://morris821028.github.io/categories/%E5%B7%A5%E4%BD%9C%E6%87%89%E7%94%A8/"/>
    
      <category term="Java" scheme="http://morris821028.github.io/categories/%E5%B7%A5%E4%BD%9C%E6%87%89%E7%94%A8/Java/"/>
    
    
      <category term="優化" scheme="http://morris821028.github.io/tags/%E5%84%AA%E5%8C%96/"/>
    
      <category term="Java" scheme="http://morris821028.github.io/tags/Java/"/>
    
      <category term="performance" scheme="http://morris821028.github.io/tags/performance/"/>
    
      <category term="效能" scheme="http://morris821028.github.io/tags/%E6%95%88%E8%83%BD/"/>
    
      <category term="內存" scheme="http://morris821028.github.io/tags/%E5%85%A7%E5%AD%98/"/>
    
      <category term="記憶體" scheme="http://morris821028.github.io/tags/%E8%A8%98%E6%86%B6%E9%AB%94/"/>
    
      <category term="memory" scheme="http://morris821028.github.io/tags/memory/"/>
    
  </entry>
  
  <entry>
    <title>Java 優化內存使用 結構篇</title>
    <link href="http://morris821028.github.io/2021/05/30/java/java-memory-optimization-1/"/>
    <id>http://morris821028.github.io/2021/05/30/java/java-memory-optimization-1/</id>
    <published>2021-05-30T04:00:00.000Z</published>
    <updated>2021-05-30T02:57:26.250Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>首先，針對 JVM 這一類的語言設計，所有事物皆為物件，那麼就表示每一個物件都必須額外紀錄 object header，也就是說一個物件在 64 位元的作業系統環境下，通常會額外帶有 12 bytes 資料 (mark word:4 bytes 和 klass word:8 bytes)，但 64 位元計算機架構需對齊 8 bytes 的規範，使得每一個物件都大上許多。</p><p>例如，一個 <code>struct Point</code> 在 C 語言裡面，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></div><div class="line">    <span class="keyword">long</span> x; <span class="comment">// 8 byte</span></div><div class="line">    <span class="keyword">long</span> y; <span class="comment">// 8 byte</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>我們輕易地就明白單一物件大小為 16 bytes，而在 Java 撰寫時，卻會變成 <span>$32 \; \text{bytes} \;(\text{header:}12 + \text{x:}8 + \text{y:}8 + \text{padding:}4)$</span><!-- Has MathJax -->。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123; <span class="comment">// object header 12 byte</span></div><div class="line">    <span class="keyword">long</span> x; <span class="comment">// 8 byte</span></div><div class="line">    <span class="keyword">long</span> y; <span class="comment">// 8 byte</span></div><div class="line">    <span class="comment">// padding 4 byte</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>這樣看起來並不妙。相同的演算法、配上相同的數據，Java 處理時的內容硬是比 C 還多出整整兩倍。物件導向有其優點，必然存在一些缺點，可以很彈性地開發、豐富的權限管理、方便追蹤剖析，卻容易在非常基礎的大量計算中暴露記憶體方面的問題。</p><h2 id="打包物件-packed-object"><a href="#打包物件-packed-object" class="headerlink" title="打包物件 (packed object)"></a>打包物件 (packed object)</h2><p>對於基礎物件，就只能倚靠撰寫 JNI 或者修改 JVM 的參數，來降低每一個單一物件的大小。對於底層不夠熟悉的開發者而言，還是可以透過一些實作方法來完成。但必須犧牲一點物件導向的方法論，喪失維護性，面對真實問題。</p><p>例如，我們儲存一個矩形，需要一個左上角和右下角的點。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> </span>&#123;</div><div class="line">    Point a; <span class="comment">// pointer: 8 bytes</span></div><div class="line">    Point b; <span class="comment">// pointer: 8 bytes</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>資深工程師總會很直覺地 <strong>重複使用</strong>，這個原則並沒有錯，但對於大量的基礎物件而言，宣告一個矩形實際上會占用 <span>$32 + 2 \times 32 = 96 \; \text{bytes}$</span><!-- Has MathJax -->。接著，老是有人跟我唱反調說「效能分析工具 (Profiler) 只給出 <span>$32 \; \text{bytes}$</span><!-- Has MathJax -->，你肯定算錯了！」別忘了，你寫的不是 C/C++，是一切皆為指標的 Java。</p><p>那我們要怎麼打包物件呢？或者說 <strong>攤平</strong>，目標要減少 <code>Point</code> 多出來的 object header。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> </span>&#123;</div><div class="line">    <span class="keyword">long</span> lx;</div><div class="line">    <span class="keyword">long</span> ly;</div><div class="line">    <span class="keyword">long</span> rx;</div><div class="line">    <span class="keyword">long</span> ry;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>返璞歸真，直接將欄位往上提取，破壞一點基礎建設，在一些 API 上犧牲一點效能。這樣就變成了 <span>$48 \; \text{bytes} = 12 + 8 \times 4 + 4 \; \text{bytes}$</span><!-- Has MathJax --> 的物件。如此一來，減少了一半的內存用量。</p><h2 id="原始型別-Primitive-Type"><a href="#原始型別-Primitive-Type" class="headerlink" title="原始型別 (Primitive Type)"></a>原始型別 (Primitive Type)</h2><p>在很多不經意的操作下，很容易將原始型別 (primitive type) 儲存成物件型別 (object type)，也就是物件導向最容易造成的問題，從整體用法來分析，並不影響程式正確性，但會造成記憶體用量飆高。如 <code>long</code> 原本為 8-byte 物件，轉換成 <code>Long</code> 會變成 24-byte 物件。</p><h3 id="繼承與泛型影響"><a href="#繼承與泛型影響" class="headerlink" title="繼承與泛型影響"></a>繼承與泛型影響</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Version</span> <span class="keyword">extends</span> <span class="title">Pair</span>&lt;<span class="title">Long</span>, <span class="title">Long</span>&gt; </span>&#123;&#125;</div></pre></td></tr></table></figure><p>當想重複使用類別，透過繼承的泛型很容易自動轉換成物件型別。這個問題在 C# 內並不存在，CIL 能允許宣告 <code>Pair&lt;long, long&gt;</code>，並且不透過型別抹除，分別建立相應的代碼，能解決此問題。在 Java 上要解決這個問題，只能更樸素一點。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Version</span> </span>&#123;</div><div class="line">    <span class="keyword">long</span> major;</div><div class="line">    <span class="keyword">long</span> minor;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>代碼多了一點，取而代之的是記憶體量減少，物件轉換次數的降低。</p><h3 id="多形使用"><a href="#多形使用" class="headerlink" title="多形使用"></a>多形使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">List&lt;Object&gt; list;</div><div class="line">list.add(<span class="number">1</span>);</div><div class="line">Map&lt;Object, Object&gt; map;</div><div class="line">map.put(<span class="number">2</span>, <span class="number">3</span>);</div></pre></td></tr></table></figure><p>多形操作下，將好幾種不同類別的物件一起使用，隱式轉換問題就會發生，一般要追到底層才知道最後發生什麼事情。由於 Java 官方的庫並沒有預設大量的原生型別的資料結構，我們只能透過像 trove4j、eclipse collections 等插件來補足，必要時自己刻一個。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">TLongObjectMap&lt;T&gt; a;</div><div class="line">TLongArrayList b;</div><div class="line">...</div></pre></td></tr></table></figure><h2 id="資料結構-Data-Structure"><a href="#資料結構-Data-Structure" class="headerlink" title="資料結構 (Data Structure)"></a>資料結構 (Data Structure)</h2><h3 id="雜湊表-Hash-Table"><a href="#雜湊表-Hash-Table" class="headerlink" title="雜湊表 (Hash Table)"></a>雜湊表 (Hash Table)</h3><p>在大多數的實作下，雜湊表佔據線性空間 <span>$\mathcal{O}(n)$</span><!-- Has MathJax -->，存取時間 <span>$\mathcal{O}(1)$</span><!-- Has MathJax -->，理論分析上也近乎完美。在處理碰撞的技巧上，影響常數級別的空間用量。通常分成以下兩種</p><h4 id="開放定址法-Open-Addressing"><a href="#開放定址法-Open-Addressing" class="headerlink" title="開放定址法 (Open Addressing)"></a>開放定址法 (Open Addressing)</h4><p>trove4j 和 eclipse collections 採用此方法。</p><ul><li>使用記憶體空間最小<br>  僅有兩個陣列 <code>key[]</code> 和 <code>value[]</code>，沒有多餘的 object header。</li><li>存取常數大，調整時間較長<br>  通常會有兩個以上的 probing 操作，中間穿插刪除操作時，容易造成退化。</li></ul><h4 id="串鏈法-Chaining"><a href="#串鏈法-Chaining" class="headerlink" title="串鏈法 (Chaining)"></a>串鏈法 (Chaining)</h4><p>jdk 預設採用此方法。</p><ul><li>使用記憶體空間最大<br>  <code>HashNode {val, next, prev}</code> 佔據了大部分的記憶體，且大量的 object header 出現。</li><li>存取常數較小</li></ul><p>從穩定性分析上，串鏈法在某種程度上可以複合許多結構，如 unrolled linked list (bucket) 或者是 binary tree 來降低最慘複雜度。而開放定址法，雖然有記憶體用量小，快取能力更高，但數據量一大，很容易在 rehash 的階段花太久的時間，而且不容易做到刪除操作。</p><h3 id="固定長度陣列-Fixed-length-Array"><a href="#固定長度陣列-Fixed-length-Array" class="headerlink" title="固定長度陣列 (Fixed-length Array)"></a>固定長度陣列 (Fixed-length Array)</h3><p>Java 開發久了，連宣告陣列都很吃技術。有時候，並沒仔細探討固定長度與不固定長度的差異。劈頭就寫一個</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Scheme</span> </span>&#123;</div><div class="line">    ArrayList&lt;Field&gt; fields;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>這樣的設計擴充性佳，具有彈性。在底層設計時，卻會發現 <code>ArrayList</code> 至少包含了 <code>size</code> 和 <code>val[]</code> 兩個欄位，而 <code>val[]</code> 包含了真正的 <code>array pointer</code> 和 <code>length</code> 兩個欄位。如果已知固定長度且不再變更，或者變更的使用量極低，且能保證 <code>size == val.length</code>，那不如直接宣告</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Scheme</span> </span>&#123;</div><div class="line">    Field[] fields;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如此一來，一個 <code>Scheme</code> 物件便能減少 <span>$16 \; \text{bytes}$</span><!-- Has MathJax -->。更進一步，我們可以利用封裝 (Encapsulation) 和多型技術，再降低 <span>$8 \; \text{bytes}$</span><!-- Has MathJax -->。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Scheme1</span> </span>&#123;</div><div class="line">    Field f1;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Scheme2</span> </span>&#123;</div><div class="line">    Field f1;</div><div class="line">    Field f2;</div><div class="line">&#125;</div><div class="line">...</div></pre></td></tr></table></figure><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>根據實際應用的數據分布，對最常用的物件進行優化。醜了點，但能解決問題。雖然並不是黑魔法，更能了解實作。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h2&gt;&lt;p&gt;首先，針對 JVM 這一類的語言設計，所有事物皆為物件，那麼就表示每一個物件都必須額外紀錄 object header，也就是說一個物件在 
      
    
    </summary>
    
      <category term="工作應用" scheme="http://morris821028.github.io/categories/%E5%B7%A5%E4%BD%9C%E6%87%89%E7%94%A8/"/>
    
      <category term="Java" scheme="http://morris821028.github.io/categories/%E5%B7%A5%E4%BD%9C%E6%87%89%E7%94%A8/Java/"/>
    
    
      <category term="優化" scheme="http://morris821028.github.io/tags/%E5%84%AA%E5%8C%96/"/>
    
      <category term="Java" scheme="http://morris821028.github.io/tags/Java/"/>
    
      <category term="performance" scheme="http://morris821028.github.io/tags/performance/"/>
    
      <category term="效能" scheme="http://morris821028.github.io/tags/%E6%95%88%E8%83%BD/"/>
    
      <category term="內存" scheme="http://morris821028.github.io/tags/%E5%85%A7%E5%AD%98/"/>
    
      <category term="記憶體" scheme="http://morris821028.github.io/tags/%E8%A8%98%E6%86%B6%E9%AB%94/"/>
    
      <category term="memory" scheme="http://morris821028.github.io/tags/memory/"/>
    
  </entry>
  
  <entry>
    <title>二八進展</title>
    <link href="http://morris821028.github.io/2021/01/31/diary-202101/"/>
    <id>http://morris821028.github.io/2021/01/31/diary-202101/</id>
    <published>2021-01-31T10:00:00.000Z</published>
    <updated>2021-01-31T07:09:49.858Z</updated>
    
    <content type="html"><![CDATA[<h2 id="工作狀況"><a href="#工作狀況" class="headerlink" title="工作狀況"></a>工作狀況</h2><p>繼去年十月升職後，得處理的工作難度也更加艱難。開會密度上升了一個層次，工作時間也因為在家辦公而拉長，在本來就沒加班費制度的工作崗位，這些早有心理準備。</p><p>工作挑戰到一個懷疑人生的地步，每天可能五、六點起床，七、八點就坐在電腦前工作十二小時，不然抽不出時間寫代碼。開會時間外，得處理不少回信和規劃一些未來架構，著手運行實驗的過程，還得不斷地補教學文件給新手入門。不得不說，不管是電機系還是資工系，著手 EDA 都有不同面向的挑戰，這裡的後端並不像外界所理解的後端，全部都要親自實作，不是像了解用法或原理道理後，單純組合使用的那一類型。</p><p>在年底的幾個月中，幾乎每天都開會，從早到晚的會議從前一個星期就開始排到下周，突發會議也再所難免。身為工程師，連續聽一個小時的話就很疲倦，一天至少聽四、五個小時，到最後都是精神渙散。</p><h2 id="轉職計畫"><a href="#轉職計畫" class="headerlink" title="轉職計畫"></a>轉職計畫</h2><p>因為工作壓力過大，起初很想換工作，請假參加了今年度的 JCConf Taiwan 2020 (Java Community Conference Taiwan)，原本想說問能不能報公司帳，問了之後還要寫一堆提交文件申請，不是送件去新竹就是上海，就像寫國科會計畫一樣麻煩，只好自掏腰包去。不意外地，現場有不少媒合工作機會的攤子，如像 <a href="https://meet.jobs/zh-TW" target="_blank" rel="external">meet jobs</a> 發了一張薪資報價單，放眼望去不少資深工程師職位有年薪百萬等級。這時候，就得想一下工作內容的難易程度，畢竟一點也沒有外界所稱的後端經驗，做基礎科學久了，多面向應用層級的後端似乎有挑戰。</p><p>之前 Google 和 Synopsys 來找人的時候，感覺就像面試從 104 的狀況一樣，老實說我還挺不喜歡 HR 在不確定實際工作內容的狀況下，諮詢轉換工作意願。自己就面試不少 HR 找來的，大部分都很難適應高強度的工作，而且行為準則也不好評量出來。如果是在公司的小產品中可能還無關緊要，在關鍵第一線產品中，每一個環節都很關鍵，能自我成長和要求才是重要的。不幸地，對大部分的人而言，只不過是為了生活而工作，那可能就不適合做第一線的挑戰，秉持「差不多就好」的心態，卻讓我花了太多時間處理那些瑣事。</p><p>想當然耳，更別說被 HR 以這種方式邀約，準備面試的工作相當地耗費精力，而且不知道有沒有稱得上工作，若只是收進去放置，吸引力就不高。主要是別因此造成其他同事的負擔。</p><h2 id="另類工作"><a href="#另類工作" class="headerlink" title="另類工作"></a>另類工作</h2><p>先前提到的高中生的 APCS 考試，實驗室學長創建了 <a href="https://sqfx.tw/" target="_blank" rel="external">「松鼠狐狸資訊學院」</a>，也讓我從中接觸了不少外界資訊。在公司工作充其量也是替老闆工作，誰也不會知道那項目你有參與並有重大貢獻。而教職能影響的方位與工作不同，同時也會影響到不少人的一生。</p><p><img src="https://i.imgur.com/qEpxXQR.jpg" alt="「應該沒有經歷過社會吧」－《咒術迴戰》"></p><p>那看看現今補習班的狀況，就會感嘆很多老師並沒有實際工作過，也不知道那些知識學來是為了什麼，在這種情況下就像考大學一樣，高中學了不少學科，上了大學全忘記。這全都是因為不知道目標與應用，當然就無法連接所學的知識。</p><p>還有更慘的是最厭煩的錯誤，做過助教就明白哪一些錯誤不該發生，身為老師就像大學只學了幾年就出來教人，沒有融會貫通的狀況下，按照書本念很難讓學生啟蒙。</p><p>學程式的確可以採 <strong>非監督式學習</strong>，就像 <strong>對抗網路</strong> 一樣，因為程式整套是很容易自我反饋和評估的。但前提是程式語言的選擇，C/C++ 和 Java 各有自己的盲區，訓練所需時間差異極大，視野深廣也不同。可謂魚與熊掌不可兼得，才會有補習班這種 <strong>監督式學習</strong>，大幅度縮短學習成本，才能對整個社會文化的進程加速。</p><p>薪水的部分也不亞於公司社畜。但目前社會歷練尚未成熟，還不敢貿然辭去工作。</p><h2 id="另類邀約"><a href="#另類邀約" class="headerlink" title="另類邀約"></a>另類邀約</h2><p>在中央大學時，與一脈單傳的學長們一起活動，畢業後各奔東西。有次來個全部跨一屆的大學長們聚餐，才知道最終的目標不見得是 Google，也可以為了自己個某些理想或機緣而努力。</p><p>隔了幾年後，大學長從大公司離職，跑去做遊戲開發。就我所知，那一行八成產品都難以賺錢，而且橫跨好幾層的美術、物理領域。學長跑來問我對遊戲有沒有興趣，心想在大學做了不少遊戲相關的技術，草創階段的難度和時間壓力跟現在不能比。</p><p>對這次的邀約，內心是雀躍的，表示先前的技術和開發經驗有被關注。但在大學課程中卻被老教授抨擊設計不符學術理論，那時對於跟人有關的開發有點動搖，沒有確切理論可以證明方向，必須全靠感覺來抓緊機會。</p><p>目前與理念有點差距，心理準備未到。</p><h2 id="轉角分支"><a href="#轉角分支" class="headerlink" title="轉角分支"></a>轉角分支</h2><h3 id="相親發展"><a href="#相親發展" class="headerlink" title="相親發展"></a>相親發展</h3><p>在一個沒有公司內部聯誼機制的環境，找到另一半只能靠自己。如在聯發科 (MTK) 還有一個特殊的交友佈告欄，外界的男女都可以跑上去諮詢，學長在那還可以煩惱要不要寄送好友邀請，Google 也有類似的內部產品。</p><p>這些事情很現實，對方要求就是身高、公司行號，這個在高級人肉市場相當常見，突然發現自己身高未達標、公司也沒名氣，連煩惱的機會都沒有。至於竹科到底有多綠，或者哪一方有多現實，也許從一開始就知道了。</p><p>在某個周末，家父打電話跟我說朋友的女兒不排斥認識，要我在台北約一約聊一聊。同樣是花蓮教育界的家庭背景，就不用煩惱價值觀差異。仔細思考一番，便覺得有所道理。要在茫茫人海中，找到那麼一個類型的女性是多麼困難。</p><p>聊了一陣子後，雙方父母的催促下，才單獨約出去餐廳吃個飯、見個面，如同相同帳號的命名規則，知道對方生日並不是難事。找餐廳的時候，店員順口提及了有沒有要慶生，想了想時間點也對，但對於第一次單獨約人吃飯就走這一險棋，真不知道那天的我在想什麼。</p><p>陸陸續續聊到了年底，覺得可能是時間點不對，對方剛入職為了試用期而努力，而自己也因為公司繁重的工作沒什麼特別心思，普通的聊聊就得顧慮太多項目，並不是像大部分的主流商品，能夠樂觀、開放、愛旅遊、健身的全能人才，的確沒什麼吸引力讓對方主動邀約。</p><p>時間久了，主動發話就沒了主題，敗給無趣的自己。</p><h3 id="參與婚宴"><a href="#參與婚宴" class="headerlink" title="參與婚宴"></a>參與婚宴</h3><p>到了這個年紀後，作為賓客被邀約去婚宴的機會更多，不再是被爸媽帶去的情況。不經感嘆，原來我還有朋友會要我去參加，明明那個時候的我是多麼地頹廢，為了挨過那個階段的障礙，表現得一點也不成熟。</p><p>畢業後的幾年裡，參加了學弟、大學同學、實驗室同學、及高中同學的婚宴，有的還特別從台北搭車跑到台南參加。每一次婚宴都像久違朋友的大型聚會，大家都不計前嫌地聊著近況，商討著哪裡有更好的工作，自己人生的下一階段目標是什麼。</p><p>看到不少認識的朋友帶著男伴、女伴參加，有點後悔自己在讀書階段都沒好好留意身邊的人，現在開始要找個隊友，卻敗給時間成本的疑慮。不時看到各大公司的花邊新聞，就會煩惱要怎麼選擇。</p><p>年底飛到台南參與，時至今日，高中畢業已十年，整班三十人，卻有三分之二的出席率。當醫生的都可以坐一桌，有的還在國外發展，有的還在進修博士，形形色色的發展都有，高中班級導師還特地從花蓮趕來，可以說是老同學聚會。如果有機會辦，也能這麼風光嗎？</p><h3 id="下個階段"><a href="#下個階段" class="headerlink" title="下個階段"></a>下個階段</h3><p>疫情剛開始時，受到親戚的邀約跑去看房子，那時候一個人做不了什麼決定，身上也沒足夠的錢，對於買賣也沒足夠的社會經驗。有幾次在同學聚會中談論到，他自己貸款買了上千萬的透天，跟準新娘一起共同努力的感覺就不一樣。有了目標，眼界與嘗試的機會也有所不同。</p><p>時隔一年，大部分時間都在家工作的我，遇上了室友要飛往美國讀書的情況，不經得深思台北省錢合租的生活，充滿了多不穩定的因素。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;工作狀況&quot;&gt;&lt;a href=&quot;#工作狀況&quot; class=&quot;headerlink&quot; title=&quot;工作狀況&quot;&gt;&lt;/a&gt;工作狀況&lt;/h2&gt;&lt;p&gt;繼去年十月升職後，得處理的工作難度也更加艱難。開會密度上升了一個層次，工作時間也因為在家辦公而拉長，在本來就沒加班費制度的工
      
    
    </summary>
    
      <category term="手札日記" scheme="http://morris821028.github.io/categories/%E6%89%8B%E6%9C%AD%E6%97%A5%E8%A8%98/"/>
    
    
  </entry>
  
  <entry>
    <title>Handover</title>
    <link href="http://morris821028.github.io/2021/01/31/work/meme-handover/"/>
    <id>http://morris821028.github.io/2021/01/31/work/meme-handover/</id>
    <published>2021-01-31T05:00:00.000Z</published>
    <updated>2021-01-31T03:39:01.704Z</updated>
    
    <content type="html"><![CDATA[<p>交接工作就是這麼簡單，打開卻不得了，一大堆初步的 linter 問題都沒解決。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;交接工作就是這麼簡單，打開卻不得了，一大堆初步的 linter 問題都沒解決。&lt;/p&gt;

      
    
    </summary>
    
      <category term="工作應用" scheme="http://morris821028.github.io/categories/%E5%B7%A5%E4%BD%9C%E6%87%89%E7%94%A8/"/>
    
      <category term="Meme" scheme="http://morris821028.github.io/categories/%E5%B7%A5%E4%BD%9C%E6%87%89%E7%94%A8/Meme/"/>
    
    
      <category term="Meme" scheme="http://morris821028.github.io/tags/Meme/"/>
    
  </entry>
  
</feed>
